Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND_BITWISE
    OR_BITWISE
    TAB

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statement statements
Rule 4     statement -> simple_statements
Rule 5     statement -> statement_with_block
Rule 6     statement -> NEWLINE
Rule 7     simple_statements -> simple_statement NEWLINE
Rule 8     statement_with_block -> class_decl
Rule 9     statement_with_block -> method_decl
Rule 10    statement_with_block -> if_stmnt
Rule 11    statement_with_block -> elif_stmnt
Rule 12    statement_with_block -> else_statement
Rule 13    statement_with_block -> for_statement
Rule 14    statement_with_block -> while_statement
Rule 15    simple_statement -> reserved_words_statement
Rule 16    simple_statement -> variable_assignment
Rule 17    simple_statement -> expressions_wrapper
Rule 18    simple_statement -> import_statement
Rule 19    simple_statement -> return_statement
Rule 20    simple_statement -> id_
Rule 21    class_decl -> CLASS ID COLON block
Rule 22    class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
Rule 23    method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
Rule 24    method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
Rule 25    method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
Rule 26    method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
Rule 27    method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
Rule 28    method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
Rule 29    method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
Rule 30    method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
Rule 31    method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
Rule 32    method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
Rule 33    method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
Rule 34    method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
Rule 35    ids_one_or_more_in_commas_with_types_wrapper -> ids_one_or_more_in_commas_with_types
Rule 36    ids_one_or_more_in_commas_with_types -> id_ COLON TYPE
Rule 37    ids_one_or_more_in_commas_with_types -> id_ COLON TYPE COMMA ids_one_or_more_in_commas_with_types
Rule 38    if_stmnt -> IF expression COLON block
Rule 39    if_stmnt -> IF expression COLON block elif_stmnt
Rule 40    if_stmnt -> IF expression COLON block else_statement
Rule 41    elif_stmnt -> ELSE_IF expression COLON block
Rule 42    elif_stmnt -> ELSE_IF expression COLON block elif_stmnt
Rule 43    elif_stmnt -> ELSE_IF expression COLON block else_statement
Rule 44    else_statement -> ELSE COLON block
Rule 45    for_statement -> FOR for_stmnt_parameter_wrapper COLON block
Rule 46    for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE expression R_PARENTHESE
Rule 47    for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number R_PARENTHESE
Rule 48    for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number COMMA integer_number R_PARENTHESE
Rule 49    for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number COMMA integer_number COMMA integer_number R_PARENTHESE
Rule 50    while_statement -> WHILE expression COLON block
Rule 51    import_statement -> IMPORT id_
Rule 52    import_statement -> FROM id_ IMPORT id_
Rule 53    return_statement -> RETURN expression
Rule 54    block -> NEWLINE INDENT statements DEDENT
Rule 55    block -> statements
Rule 56    expressions_wrapper -> expressions
Rule 57    expressions -> expression
Rule 58    expressions -> expression COMMA expressions
Rule 59    expression -> LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
Rule 60    expression -> comparison_expressions
Rule 61    expression -> arithmetic_expression
Rule 62    expression -> function_call_expression
Rule 63    expression -> L_PARENTHESE expression R_PARENTHESE
Rule 64    function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
Rule 65    function_call_expression -> id_ L_PARENTHESE R_PARENTHESE
Rule 66    function_call_expression -> id_ DOT function_call_expression
Rule 67    comparison_expressions -> comparison_expr_OR
Rule 68    comparison_expr_OR -> comparison_expr_OR OR comparison_expr_AND
Rule 69    comparison_expr_OR -> comparison_expr_AND
Rule 70    comparison_expr_AND -> comparison_expr_AND AND comparison_expr_high_prec
Rule 71    comparison_expr_AND -> comparison_expr_high_prec
Rule 72    comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base
Rule 73    comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base
Rule 74    comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base
Rule 75    comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
Rule 76    comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base
Rule 77    comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
Rule 78    comparison_expr_high_prec -> comparison_expr_base
Rule 79    comparison_expr_high_prec -> NOT comparison_expr_base
Rule 80    comparison_expr_base -> all_types
Rule 81    comparison_expr_base -> id_
Rule 82    comparison_expr_base -> arithmetic_expression
Rule 83    comparison_expr_base -> function_call_expression
Rule 84    comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE
Rule 85    all_types -> boolean_types
Rule 86    all_types -> id_
Rule 87    all_types -> integer_number
Rule 88    all_types -> float_number
Rule 89    all_types -> string_object
Rule 90    all_types -> list_object
Rule 91    arithmetic_expression -> MINUS arithmetic_expression
Rule 92    arithmetic_expression -> arithmetic_expression PLUS term
Rule 93    arithmetic_expression -> arithmetic_expression MINUS term
Rule 94    arithmetic_expression -> term
Rule 95    term -> term MULTIPLY factor
Rule 96    term -> term DIVIDE factor
Rule 97    term -> factor
Rule 98    term -> function_call_expression
Rule 99    factor -> integer_number
Rule 100   factor -> float_number
Rule 101   factor -> id_
Rule 102   factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE
Rule 103   variable_assignment -> id_ EQUAL_ASSIGN expression
Rule 104   variable_assignment -> id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
Rule 105   list_object -> L_BRACKET R_BRACKET
Rule 106   list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET
Rule 107   list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET
Rule 108   list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET
Rule 109   ids_one_or_more_in_commas_wrapper -> ids_one_or_more_in_commas
Rule 110   ids_one_or_more_in_commas -> id_
Rule 111   ids_one_or_more_in_commas -> id_ COMMA types_one_or_more_in_commas
Rule 112   types_one_or_more_in_commas -> all_types
Rule 113   types_one_or_more_in_commas -> all_types COMMA integer_number_one_or_more_in_commas
Rule 114   types_one_or_more_in_commas -> all_types COMMA boolean_types_one_or_more_in_commas
Rule 115   types_one_or_more_in_commas -> all_types COMMA float_number_one_or_more_in_commas
Rule 116   types_one_or_more_in_commas -> all_types COMMA string_object_one_or_more_in_commas
Rule 117   types_one_or_more_in_commas -> all_types COMMA ids_one_or_more_in_commas
Rule 118   boolean_types_one_or_more_in_commas -> boolean_types
Rule 119   boolean_types_one_or_more_in_commas -> boolean_types COMMA types_one_or_more_in_commas
Rule 120   integer_number_one_or_more_in_commas -> integer_number
Rule 121   integer_number_one_or_more_in_commas -> integer_number COMMA types_one_or_more_in_commas
Rule 122   float_number_one_or_more_in_commas -> float_number
Rule 123   float_number_one_or_more_in_commas -> float_number COMMA types_one_or_more_in_commas
Rule 124   string_object_one_or_more_in_commas -> string_object
Rule 125   string_object_one_or_more_in_commas -> string_object COMMA types_one_or_more_in_commas
Rule 126   arithmetic_op -> PLUS
Rule 127   arithmetic_op -> MINUS
Rule 128   arithmetic_op -> MULTIPLY
Rule 129   arithmetic_op -> DIVIDE
Rule 130   arithmetic_op -> POWER
Rule 131   comparison_ops -> AND
Rule 132   comparison_ops -> OR
Rule 133   comparison_ops -> NOT
Rule 134   comparison_ops -> EQUALS
Rule 135   comparison_ops -> NOT_EQUALS
Rule 136   comparison_ops -> LESS_THAN
Rule 137   comparison_ops -> LESS_THAN_OR_EQ
Rule 138   comparison_ops -> GREATER_THAN
Rule 139   comparison_ops -> GREATER_THAN_OR_EQ
Rule 140   id_ -> ID
Rule 141   id_ -> id_ DOT id_
Rule 142   id_ -> SELF DOT id_
Rule 143   id_ -> list_element
Rule 144   TYPE -> BOOLEAN
Rule 145   TYPE -> FLOAT
Rule 146   TYPE -> STRING
Rule 147   TYPE -> INT
Rule 148   TYPE -> LIST
Rule 149   string_object -> STRING_LITERAL
Rule 150   boolean_types -> TRUE
Rule 151   boolean_types -> FALSE
Rule 152   float_number -> number DOT number
Rule 153   integer_number -> number
Rule 154   number -> DIGIT
Rule 155   reserved_words_statement -> PASS
Rule 156   reserved_words_statement -> RETURN
Rule 157   reserved_words_statement -> CONTINUE
Rule 158   reserved_words_statement -> BREAK
Rule 159   reserved_words_statement -> SELF
Rule 160   empty -> <empty>

Terminals, with rules where they appear

AND                  : 70 131
AND_BITWISE          : 
BOOLEAN              : 144
BREAK                : 158
CLASS                : 21 22
COLON                : 21 22 23 24 25 26 27 28 29 30 31 32 33 34 36 37 38 39 40 41 42 43 44 45 50
COMMA                : 28 30 32 34 37 48 49 49 58 111 113 114 115 116 117 119 121 123 125
CONTINUE             : 157
DEDENT               : 54
DIGIT                : 154
DIVIDE               : 96 129
DOT                  : 66 141 142 152
ELSE                 : 44
ELSE_IF              : 41 42 43
EQUALS               : 72 134
EQUAL_ASSIGN         : 103 104
FALSE                : 151
FLOAT                : 145
FOR                  : 45
FROM                 : 52
GREATER_THAN         : 76 138
GREATER_THAN_OR_EQ   : 77 139
ID                   : 21 22 23 24 25 26 27 28 29 30 31 32 33 34 140
IF                   : 38 39 40
IMPORT               : 51 52
IN                   : 46 47 48 49
INDENT               : 54
INT                  : 147
LEN                  : 59
LESS_THAN            : 74 136
LESS_THAN_OR_EQ      : 75 137
LIST                 : 148
L_BRACKET            : 105 106 107 108
L_PARENTHESE         : 22 23 24 25 26 27 28 29 30 31 32 33 34 46 47 48 49 59 63 64 65 84 102
METHOD_DEF           : 23 24 25 26 27 28 29 30 31 32 33 34
MINUS                : 91 93 127
MULTIPLY             : 95 128
NEWLINE              : 6 7 54
NOT                  : 79 133
NOT_EQUALS           : 73 135
OR                   : 68 132
OR_BITWISE           : 
PASS                 : 155
PLUS                 : 92 126
POWER                : 130
RANGE                : 46 47 48 49
RETURN               : 53 156
RIGHT_ARROW          : 25 26 29 30 31 32
R_BRACKET            : 105 106 107 108
R_PARENTHESE         : 22 23 24 25 26 27 28 29 30 31 32 33 34 46 47 48 49 59 63 64 65 84 102
SELF                 : 24 26 28 30 32 34 142 159
STRING               : 146
STRING_LITERAL       : 149
TAB                  : 
TRUE                 : 150
WHILE                : 50
error                : 

Nonterminals, with rules where they appear

TYPE                 : 25 26 29 30 31 32 36 37
all_types            : 80 112 113 114 115 116 117
arithmetic_expression : 61 82 91 92 93 102 104 108
arithmetic_op        : 104
block                : 21 22 23 24 25 26 27 28 29 30 31 32 33 34 38 39 40 41 42 43 44 45 50
boolean_types        : 85 118 119
boolean_types_one_or_more_in_commas : 114
class_decl           : 8
comparison_expr_AND  : 68 69 70
comparison_expr_OR   : 67 68
comparison_expr_base : 72 73 74 75 76 77 78 79
comparison_expr_high_prec : 70 71 72 73 74 75 76 77
comparison_expressions : 60 84
comparison_ops       : 
elif_stmnt           : 11 39 42
else_statement       : 12 40 43
empty                : 
expression           : 38 39 40 41 42 43 46 50 53 57 58 63 103
expressions          : 56 58
expressions_wrapper  : 17 59 64
factor               : 95 96 97
float_number         : 88 100 122 123
float_number_one_or_more_in_commas : 115
for_statement        : 13
for_stmnt_parameter_wrapper : 45
function_call_expression : 62 66 83 98
id_                  : 20 22 36 37 46 47 48 49 51 52 52 64 65 66 81 86 101 103 104 108 110 111 141 141 142
ids_one_or_more_in_commas : 107 109 117
ids_one_or_more_in_commas_with_types : 35 37
ids_one_or_more_in_commas_with_types_wrapper : 31 32 33 34
ids_one_or_more_in_commas_wrapper : 27 28 29 30
if_stmnt             : 10
import_statement     : 18
integer_number       : 47 48 48 49 49 49 87 99 120 121
integer_number_one_or_more_in_commas : 113
list_element         : 143
list_object          : 90
method_decl          : 9
number               : 152 152 153
program              : 0
reserved_words_statement : 15
return_statement     : 19
simple_statement     : 7
simple_statements    : 4
statement            : 2 3
statement_with_block : 5
statements           : 1 3 54 55
string_object        : 89 124 125
string_object_one_or_more_in_commas : 116
term                 : 92 93 94 95 96
types_one_or_more_in_commas : 106 111 119 121 123 125
variable_assignment  : 16
while_statement      : 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 6
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .

    $end            reduce using rule 1 (program -> statements .)


state 3

    (2) statements -> statement .
    (3) statements -> statement . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for METHOD_DEF resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE_IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for SELF resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FROM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEN resolved as shift
  ! shift/reduce conflict for L_PARENTHESE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for DIGIT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for L_BRACKET resolved as shift
    $end            reduce using rule 2 (statements -> statement .)
    DEDENT          reduce using rule 2 (statements -> statement .)
    NEWLINE         shift and go to state 6
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

  ! NEWLINE         [ reduce using rule 2 (statements -> statement .) ]
  ! CLASS           [ reduce using rule 2 (statements -> statement .) ]
  ! METHOD_DEF      [ reduce using rule 2 (statements -> statement .) ]
  ! IF              [ reduce using rule 2 (statements -> statement .) ]
  ! ELSE_IF         [ reduce using rule 2 (statements -> statement .) ]
  ! ELSE            [ reduce using rule 2 (statements -> statement .) ]
  ! FOR             [ reduce using rule 2 (statements -> statement .) ]
  ! WHILE           [ reduce using rule 2 (statements -> statement .) ]
  ! PASS            [ reduce using rule 2 (statements -> statement .) ]
  ! RETURN          [ reduce using rule 2 (statements -> statement .) ]
  ! CONTINUE        [ reduce using rule 2 (statements -> statement .) ]
  ! BREAK           [ reduce using rule 2 (statements -> statement .) ]
  ! SELF            [ reduce using rule 2 (statements -> statement .) ]
  ! IMPORT          [ reduce using rule 2 (statements -> statement .) ]
  ! FROM            [ reduce using rule 2 (statements -> statement .) ]
  ! ID              [ reduce using rule 2 (statements -> statement .) ]
  ! LEN             [ reduce using rule 2 (statements -> statement .) ]
  ! L_PARENTHESE    [ reduce using rule 2 (statements -> statement .) ]
  ! MINUS           [ reduce using rule 2 (statements -> statement .) ]
  ! NOT             [ reduce using rule 2 (statements -> statement .) ]
  ! DIGIT           [ reduce using rule 2 (statements -> statement .) ]
  ! TRUE            [ reduce using rule 2 (statements -> statement .) ]
  ! FALSE           [ reduce using rule 2 (statements -> statement .) ]
  ! STRING_LITERAL  [ reduce using rule 2 (statements -> statement .) ]
  ! L_BRACKET       [ reduce using rule 2 (statements -> statement .) ]

    statement                      shift and go to state 3
    statements                     shift and go to state 64
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 4

    (4) statement -> simple_statements .

    NEWLINE         reduce using rule 4 (statement -> simple_statements .)
    CLASS           reduce using rule 4 (statement -> simple_statements .)
    METHOD_DEF      reduce using rule 4 (statement -> simple_statements .)
    IF              reduce using rule 4 (statement -> simple_statements .)
    ELSE_IF         reduce using rule 4 (statement -> simple_statements .)
    ELSE            reduce using rule 4 (statement -> simple_statements .)
    FOR             reduce using rule 4 (statement -> simple_statements .)
    WHILE           reduce using rule 4 (statement -> simple_statements .)
    PASS            reduce using rule 4 (statement -> simple_statements .)
    RETURN          reduce using rule 4 (statement -> simple_statements .)
    CONTINUE        reduce using rule 4 (statement -> simple_statements .)
    BREAK           reduce using rule 4 (statement -> simple_statements .)
    SELF            reduce using rule 4 (statement -> simple_statements .)
    IMPORT          reduce using rule 4 (statement -> simple_statements .)
    FROM            reduce using rule 4 (statement -> simple_statements .)
    ID              reduce using rule 4 (statement -> simple_statements .)
    LEN             reduce using rule 4 (statement -> simple_statements .)
    L_PARENTHESE    reduce using rule 4 (statement -> simple_statements .)
    MINUS           reduce using rule 4 (statement -> simple_statements .)
    NOT             reduce using rule 4 (statement -> simple_statements .)
    DIGIT           reduce using rule 4 (statement -> simple_statements .)
    TRUE            reduce using rule 4 (statement -> simple_statements .)
    FALSE           reduce using rule 4 (statement -> simple_statements .)
    STRING_LITERAL  reduce using rule 4 (statement -> simple_statements .)
    L_BRACKET       reduce using rule 4 (statement -> simple_statements .)
    $end            reduce using rule 4 (statement -> simple_statements .)
    DEDENT          reduce using rule 4 (statement -> simple_statements .)


state 5

    (5) statement -> statement_with_block .

    NEWLINE         reduce using rule 5 (statement -> statement_with_block .)
    CLASS           reduce using rule 5 (statement -> statement_with_block .)
    METHOD_DEF      reduce using rule 5 (statement -> statement_with_block .)
    IF              reduce using rule 5 (statement -> statement_with_block .)
    ELSE_IF         reduce using rule 5 (statement -> statement_with_block .)
    ELSE            reduce using rule 5 (statement -> statement_with_block .)
    FOR             reduce using rule 5 (statement -> statement_with_block .)
    WHILE           reduce using rule 5 (statement -> statement_with_block .)
    PASS            reduce using rule 5 (statement -> statement_with_block .)
    RETURN          reduce using rule 5 (statement -> statement_with_block .)
    CONTINUE        reduce using rule 5 (statement -> statement_with_block .)
    BREAK           reduce using rule 5 (statement -> statement_with_block .)
    SELF            reduce using rule 5 (statement -> statement_with_block .)
    IMPORT          reduce using rule 5 (statement -> statement_with_block .)
    FROM            reduce using rule 5 (statement -> statement_with_block .)
    ID              reduce using rule 5 (statement -> statement_with_block .)
    LEN             reduce using rule 5 (statement -> statement_with_block .)
    L_PARENTHESE    reduce using rule 5 (statement -> statement_with_block .)
    MINUS           reduce using rule 5 (statement -> statement_with_block .)
    NOT             reduce using rule 5 (statement -> statement_with_block .)
    DIGIT           reduce using rule 5 (statement -> statement_with_block .)
    TRUE            reduce using rule 5 (statement -> statement_with_block .)
    FALSE           reduce using rule 5 (statement -> statement_with_block .)
    STRING_LITERAL  reduce using rule 5 (statement -> statement_with_block .)
    L_BRACKET       reduce using rule 5 (statement -> statement_with_block .)
    $end            reduce using rule 5 (statement -> statement_with_block .)
    DEDENT          reduce using rule 5 (statement -> statement_with_block .)


state 6

    (6) statement -> NEWLINE .

    NEWLINE         reduce using rule 6 (statement -> NEWLINE .)
    CLASS           reduce using rule 6 (statement -> NEWLINE .)
    METHOD_DEF      reduce using rule 6 (statement -> NEWLINE .)
    IF              reduce using rule 6 (statement -> NEWLINE .)
    ELSE_IF         reduce using rule 6 (statement -> NEWLINE .)
    ELSE            reduce using rule 6 (statement -> NEWLINE .)
    FOR             reduce using rule 6 (statement -> NEWLINE .)
    WHILE           reduce using rule 6 (statement -> NEWLINE .)
    PASS            reduce using rule 6 (statement -> NEWLINE .)
    RETURN          reduce using rule 6 (statement -> NEWLINE .)
    CONTINUE        reduce using rule 6 (statement -> NEWLINE .)
    BREAK           reduce using rule 6 (statement -> NEWLINE .)
    SELF            reduce using rule 6 (statement -> NEWLINE .)
    IMPORT          reduce using rule 6 (statement -> NEWLINE .)
    FROM            reduce using rule 6 (statement -> NEWLINE .)
    ID              reduce using rule 6 (statement -> NEWLINE .)
    LEN             reduce using rule 6 (statement -> NEWLINE .)
    L_PARENTHESE    reduce using rule 6 (statement -> NEWLINE .)
    MINUS           reduce using rule 6 (statement -> NEWLINE .)
    NOT             reduce using rule 6 (statement -> NEWLINE .)
    DIGIT           reduce using rule 6 (statement -> NEWLINE .)
    TRUE            reduce using rule 6 (statement -> NEWLINE .)
    FALSE           reduce using rule 6 (statement -> NEWLINE .)
    STRING_LITERAL  reduce using rule 6 (statement -> NEWLINE .)
    L_BRACKET       reduce using rule 6 (statement -> NEWLINE .)
    $end            reduce using rule 6 (statement -> NEWLINE .)
    DEDENT          reduce using rule 6 (statement -> NEWLINE .)


state 7

    (7) simple_statements -> simple_statement . NEWLINE

    NEWLINE         shift and go to state 65


state 8

    (8) statement_with_block -> class_decl .

    NEWLINE         reduce using rule 8 (statement_with_block -> class_decl .)
    CLASS           reduce using rule 8 (statement_with_block -> class_decl .)
    METHOD_DEF      reduce using rule 8 (statement_with_block -> class_decl .)
    IF              reduce using rule 8 (statement_with_block -> class_decl .)
    ELSE_IF         reduce using rule 8 (statement_with_block -> class_decl .)
    ELSE            reduce using rule 8 (statement_with_block -> class_decl .)
    FOR             reduce using rule 8 (statement_with_block -> class_decl .)
    WHILE           reduce using rule 8 (statement_with_block -> class_decl .)
    PASS            reduce using rule 8 (statement_with_block -> class_decl .)
    RETURN          reduce using rule 8 (statement_with_block -> class_decl .)
    CONTINUE        reduce using rule 8 (statement_with_block -> class_decl .)
    BREAK           reduce using rule 8 (statement_with_block -> class_decl .)
    SELF            reduce using rule 8 (statement_with_block -> class_decl .)
    IMPORT          reduce using rule 8 (statement_with_block -> class_decl .)
    FROM            reduce using rule 8 (statement_with_block -> class_decl .)
    ID              reduce using rule 8 (statement_with_block -> class_decl .)
    LEN             reduce using rule 8 (statement_with_block -> class_decl .)
    L_PARENTHESE    reduce using rule 8 (statement_with_block -> class_decl .)
    MINUS           reduce using rule 8 (statement_with_block -> class_decl .)
    NOT             reduce using rule 8 (statement_with_block -> class_decl .)
    DIGIT           reduce using rule 8 (statement_with_block -> class_decl .)
    TRUE            reduce using rule 8 (statement_with_block -> class_decl .)
    FALSE           reduce using rule 8 (statement_with_block -> class_decl .)
    STRING_LITERAL  reduce using rule 8 (statement_with_block -> class_decl .)
    L_BRACKET       reduce using rule 8 (statement_with_block -> class_decl .)
    $end            reduce using rule 8 (statement_with_block -> class_decl .)
    DEDENT          reduce using rule 8 (statement_with_block -> class_decl .)


state 9

    (9) statement_with_block -> method_decl .

    NEWLINE         reduce using rule 9 (statement_with_block -> method_decl .)
    CLASS           reduce using rule 9 (statement_with_block -> method_decl .)
    METHOD_DEF      reduce using rule 9 (statement_with_block -> method_decl .)
    IF              reduce using rule 9 (statement_with_block -> method_decl .)
    ELSE_IF         reduce using rule 9 (statement_with_block -> method_decl .)
    ELSE            reduce using rule 9 (statement_with_block -> method_decl .)
    FOR             reduce using rule 9 (statement_with_block -> method_decl .)
    WHILE           reduce using rule 9 (statement_with_block -> method_decl .)
    PASS            reduce using rule 9 (statement_with_block -> method_decl .)
    RETURN          reduce using rule 9 (statement_with_block -> method_decl .)
    CONTINUE        reduce using rule 9 (statement_with_block -> method_decl .)
    BREAK           reduce using rule 9 (statement_with_block -> method_decl .)
    SELF            reduce using rule 9 (statement_with_block -> method_decl .)
    IMPORT          reduce using rule 9 (statement_with_block -> method_decl .)
    FROM            reduce using rule 9 (statement_with_block -> method_decl .)
    ID              reduce using rule 9 (statement_with_block -> method_decl .)
    LEN             reduce using rule 9 (statement_with_block -> method_decl .)
    L_PARENTHESE    reduce using rule 9 (statement_with_block -> method_decl .)
    MINUS           reduce using rule 9 (statement_with_block -> method_decl .)
    NOT             reduce using rule 9 (statement_with_block -> method_decl .)
    DIGIT           reduce using rule 9 (statement_with_block -> method_decl .)
    TRUE            reduce using rule 9 (statement_with_block -> method_decl .)
    FALSE           reduce using rule 9 (statement_with_block -> method_decl .)
    STRING_LITERAL  reduce using rule 9 (statement_with_block -> method_decl .)
    L_BRACKET       reduce using rule 9 (statement_with_block -> method_decl .)
    $end            reduce using rule 9 (statement_with_block -> method_decl .)
    DEDENT          reduce using rule 9 (statement_with_block -> method_decl .)


state 10

    (10) statement_with_block -> if_stmnt .

    NEWLINE         reduce using rule 10 (statement_with_block -> if_stmnt .)
    CLASS           reduce using rule 10 (statement_with_block -> if_stmnt .)
    METHOD_DEF      reduce using rule 10 (statement_with_block -> if_stmnt .)
    IF              reduce using rule 10 (statement_with_block -> if_stmnt .)
    ELSE_IF         reduce using rule 10 (statement_with_block -> if_stmnt .)
    ELSE            reduce using rule 10 (statement_with_block -> if_stmnt .)
    FOR             reduce using rule 10 (statement_with_block -> if_stmnt .)
    WHILE           reduce using rule 10 (statement_with_block -> if_stmnt .)
    PASS            reduce using rule 10 (statement_with_block -> if_stmnt .)
    RETURN          reduce using rule 10 (statement_with_block -> if_stmnt .)
    CONTINUE        reduce using rule 10 (statement_with_block -> if_stmnt .)
    BREAK           reduce using rule 10 (statement_with_block -> if_stmnt .)
    SELF            reduce using rule 10 (statement_with_block -> if_stmnt .)
    IMPORT          reduce using rule 10 (statement_with_block -> if_stmnt .)
    FROM            reduce using rule 10 (statement_with_block -> if_stmnt .)
    ID              reduce using rule 10 (statement_with_block -> if_stmnt .)
    LEN             reduce using rule 10 (statement_with_block -> if_stmnt .)
    L_PARENTHESE    reduce using rule 10 (statement_with_block -> if_stmnt .)
    MINUS           reduce using rule 10 (statement_with_block -> if_stmnt .)
    NOT             reduce using rule 10 (statement_with_block -> if_stmnt .)
    DIGIT           reduce using rule 10 (statement_with_block -> if_stmnt .)
    TRUE            reduce using rule 10 (statement_with_block -> if_stmnt .)
    FALSE           reduce using rule 10 (statement_with_block -> if_stmnt .)
    STRING_LITERAL  reduce using rule 10 (statement_with_block -> if_stmnt .)
    L_BRACKET       reduce using rule 10 (statement_with_block -> if_stmnt .)
    $end            reduce using rule 10 (statement_with_block -> if_stmnt .)
    DEDENT          reduce using rule 10 (statement_with_block -> if_stmnt .)


state 11

    (11) statement_with_block -> elif_stmnt .

    NEWLINE         reduce using rule 11 (statement_with_block -> elif_stmnt .)
    CLASS           reduce using rule 11 (statement_with_block -> elif_stmnt .)
    METHOD_DEF      reduce using rule 11 (statement_with_block -> elif_stmnt .)
    IF              reduce using rule 11 (statement_with_block -> elif_stmnt .)
    ELSE_IF         reduce using rule 11 (statement_with_block -> elif_stmnt .)
    ELSE            reduce using rule 11 (statement_with_block -> elif_stmnt .)
    FOR             reduce using rule 11 (statement_with_block -> elif_stmnt .)
    WHILE           reduce using rule 11 (statement_with_block -> elif_stmnt .)
    PASS            reduce using rule 11 (statement_with_block -> elif_stmnt .)
    RETURN          reduce using rule 11 (statement_with_block -> elif_stmnt .)
    CONTINUE        reduce using rule 11 (statement_with_block -> elif_stmnt .)
    BREAK           reduce using rule 11 (statement_with_block -> elif_stmnt .)
    SELF            reduce using rule 11 (statement_with_block -> elif_stmnt .)
    IMPORT          reduce using rule 11 (statement_with_block -> elif_stmnt .)
    FROM            reduce using rule 11 (statement_with_block -> elif_stmnt .)
    ID              reduce using rule 11 (statement_with_block -> elif_stmnt .)
    LEN             reduce using rule 11 (statement_with_block -> elif_stmnt .)
    L_PARENTHESE    reduce using rule 11 (statement_with_block -> elif_stmnt .)
    MINUS           reduce using rule 11 (statement_with_block -> elif_stmnt .)
    NOT             reduce using rule 11 (statement_with_block -> elif_stmnt .)
    DIGIT           reduce using rule 11 (statement_with_block -> elif_stmnt .)
    TRUE            reduce using rule 11 (statement_with_block -> elif_stmnt .)
    FALSE           reduce using rule 11 (statement_with_block -> elif_stmnt .)
    STRING_LITERAL  reduce using rule 11 (statement_with_block -> elif_stmnt .)
    L_BRACKET       reduce using rule 11 (statement_with_block -> elif_stmnt .)
    $end            reduce using rule 11 (statement_with_block -> elif_stmnt .)
    DEDENT          reduce using rule 11 (statement_with_block -> elif_stmnt .)


state 12

    (12) statement_with_block -> else_statement .

    NEWLINE         reduce using rule 12 (statement_with_block -> else_statement .)
    CLASS           reduce using rule 12 (statement_with_block -> else_statement .)
    METHOD_DEF      reduce using rule 12 (statement_with_block -> else_statement .)
    IF              reduce using rule 12 (statement_with_block -> else_statement .)
    ELSE_IF         reduce using rule 12 (statement_with_block -> else_statement .)
    ELSE            reduce using rule 12 (statement_with_block -> else_statement .)
    FOR             reduce using rule 12 (statement_with_block -> else_statement .)
    WHILE           reduce using rule 12 (statement_with_block -> else_statement .)
    PASS            reduce using rule 12 (statement_with_block -> else_statement .)
    RETURN          reduce using rule 12 (statement_with_block -> else_statement .)
    CONTINUE        reduce using rule 12 (statement_with_block -> else_statement .)
    BREAK           reduce using rule 12 (statement_with_block -> else_statement .)
    SELF            reduce using rule 12 (statement_with_block -> else_statement .)
    IMPORT          reduce using rule 12 (statement_with_block -> else_statement .)
    FROM            reduce using rule 12 (statement_with_block -> else_statement .)
    ID              reduce using rule 12 (statement_with_block -> else_statement .)
    LEN             reduce using rule 12 (statement_with_block -> else_statement .)
    L_PARENTHESE    reduce using rule 12 (statement_with_block -> else_statement .)
    MINUS           reduce using rule 12 (statement_with_block -> else_statement .)
    NOT             reduce using rule 12 (statement_with_block -> else_statement .)
    DIGIT           reduce using rule 12 (statement_with_block -> else_statement .)
    TRUE            reduce using rule 12 (statement_with_block -> else_statement .)
    FALSE           reduce using rule 12 (statement_with_block -> else_statement .)
    STRING_LITERAL  reduce using rule 12 (statement_with_block -> else_statement .)
    L_BRACKET       reduce using rule 12 (statement_with_block -> else_statement .)
    $end            reduce using rule 12 (statement_with_block -> else_statement .)
    DEDENT          reduce using rule 12 (statement_with_block -> else_statement .)


state 13

    (13) statement_with_block -> for_statement .

    NEWLINE         reduce using rule 13 (statement_with_block -> for_statement .)
    CLASS           reduce using rule 13 (statement_with_block -> for_statement .)
    METHOD_DEF      reduce using rule 13 (statement_with_block -> for_statement .)
    IF              reduce using rule 13 (statement_with_block -> for_statement .)
    ELSE_IF         reduce using rule 13 (statement_with_block -> for_statement .)
    ELSE            reduce using rule 13 (statement_with_block -> for_statement .)
    FOR             reduce using rule 13 (statement_with_block -> for_statement .)
    WHILE           reduce using rule 13 (statement_with_block -> for_statement .)
    PASS            reduce using rule 13 (statement_with_block -> for_statement .)
    RETURN          reduce using rule 13 (statement_with_block -> for_statement .)
    CONTINUE        reduce using rule 13 (statement_with_block -> for_statement .)
    BREAK           reduce using rule 13 (statement_with_block -> for_statement .)
    SELF            reduce using rule 13 (statement_with_block -> for_statement .)
    IMPORT          reduce using rule 13 (statement_with_block -> for_statement .)
    FROM            reduce using rule 13 (statement_with_block -> for_statement .)
    ID              reduce using rule 13 (statement_with_block -> for_statement .)
    LEN             reduce using rule 13 (statement_with_block -> for_statement .)
    L_PARENTHESE    reduce using rule 13 (statement_with_block -> for_statement .)
    MINUS           reduce using rule 13 (statement_with_block -> for_statement .)
    NOT             reduce using rule 13 (statement_with_block -> for_statement .)
    DIGIT           reduce using rule 13 (statement_with_block -> for_statement .)
    TRUE            reduce using rule 13 (statement_with_block -> for_statement .)
    FALSE           reduce using rule 13 (statement_with_block -> for_statement .)
    STRING_LITERAL  reduce using rule 13 (statement_with_block -> for_statement .)
    L_BRACKET       reduce using rule 13 (statement_with_block -> for_statement .)
    $end            reduce using rule 13 (statement_with_block -> for_statement .)
    DEDENT          reduce using rule 13 (statement_with_block -> for_statement .)


state 14

    (14) statement_with_block -> while_statement .

    NEWLINE         reduce using rule 14 (statement_with_block -> while_statement .)
    CLASS           reduce using rule 14 (statement_with_block -> while_statement .)
    METHOD_DEF      reduce using rule 14 (statement_with_block -> while_statement .)
    IF              reduce using rule 14 (statement_with_block -> while_statement .)
    ELSE_IF         reduce using rule 14 (statement_with_block -> while_statement .)
    ELSE            reduce using rule 14 (statement_with_block -> while_statement .)
    FOR             reduce using rule 14 (statement_with_block -> while_statement .)
    WHILE           reduce using rule 14 (statement_with_block -> while_statement .)
    PASS            reduce using rule 14 (statement_with_block -> while_statement .)
    RETURN          reduce using rule 14 (statement_with_block -> while_statement .)
    CONTINUE        reduce using rule 14 (statement_with_block -> while_statement .)
    BREAK           reduce using rule 14 (statement_with_block -> while_statement .)
    SELF            reduce using rule 14 (statement_with_block -> while_statement .)
    IMPORT          reduce using rule 14 (statement_with_block -> while_statement .)
    FROM            reduce using rule 14 (statement_with_block -> while_statement .)
    ID              reduce using rule 14 (statement_with_block -> while_statement .)
    LEN             reduce using rule 14 (statement_with_block -> while_statement .)
    L_PARENTHESE    reduce using rule 14 (statement_with_block -> while_statement .)
    MINUS           reduce using rule 14 (statement_with_block -> while_statement .)
    NOT             reduce using rule 14 (statement_with_block -> while_statement .)
    DIGIT           reduce using rule 14 (statement_with_block -> while_statement .)
    TRUE            reduce using rule 14 (statement_with_block -> while_statement .)
    FALSE           reduce using rule 14 (statement_with_block -> while_statement .)
    STRING_LITERAL  reduce using rule 14 (statement_with_block -> while_statement .)
    L_BRACKET       reduce using rule 14 (statement_with_block -> while_statement .)
    $end            reduce using rule 14 (statement_with_block -> while_statement .)
    DEDENT          reduce using rule 14 (statement_with_block -> while_statement .)


state 15

    (15) simple_statement -> reserved_words_statement .

    NEWLINE         reduce using rule 15 (simple_statement -> reserved_words_statement .)


state 16

    (16) simple_statement -> variable_assignment .

    NEWLINE         reduce using rule 16 (simple_statement -> variable_assignment .)


state 17

    (17) simple_statement -> expressions_wrapper .

    NEWLINE         reduce using rule 17 (simple_statement -> expressions_wrapper .)


state 18

    (18) simple_statement -> import_statement .

    NEWLINE         reduce using rule 18 (simple_statement -> import_statement .)


state 19

    (19) simple_statement -> return_statement .

    NEWLINE         reduce using rule 19 (simple_statement -> return_statement .)


state 20

    (20) simple_statement -> id_ .
    (103) variable_assignment -> id_ . EQUAL_ASSIGN expression
    (104) variable_assignment -> id_ . arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET
    (64) function_call_expression -> id_ . L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> id_ . L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> id_ . DOT function_call_expression
    (101) factor -> id_ .
    (81) comparison_expr_base -> id_ .
    (86) all_types -> id_ .
    (126) arithmetic_op -> . PLUS
    (127) arithmetic_op -> . MINUS
    (128) arithmetic_op -> . MULTIPLY
    (129) arithmetic_op -> . DIVIDE
    (130) arithmetic_op -> . POWER

  ! reduce/reduce conflict for NEWLINE resolved using rule 20 (simple_statement -> id_ .)
  ! reduce/reduce conflict for EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for AND resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for OR resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for COMMA resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 20 (simple_statement -> id_ .)
  ! reduce/reduce conflict for EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for AND resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for OR resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for COMMA resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 20 (simple_statement -> id_ .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    NEWLINE         reduce using rule 20 (simple_statement -> id_ .)
    EQUAL_ASSIGN    shift and go to state 66
    DOT             shift and go to state 68
    L_BRACKET       shift and go to state 69
    L_PARENTHESE    shift and go to state 70
    EQUALS          reduce using rule 81 (comparison_expr_base -> id_ .)
    NOT_EQUALS      reduce using rule 81 (comparison_expr_base -> id_ .)
    LESS_THAN       reduce using rule 81 (comparison_expr_base -> id_ .)
    LESS_THAN_OR_EQ reduce using rule 81 (comparison_expr_base -> id_ .)
    GREATER_THAN    reduce using rule 81 (comparison_expr_base -> id_ .)
    GREATER_THAN_OR_EQ reduce using rule 81 (comparison_expr_base -> id_ .)
    AND             reduce using rule 81 (comparison_expr_base -> id_ .)
    OR              reduce using rule 81 (comparison_expr_base -> id_ .)
    COMMA           reduce using rule 81 (comparison_expr_base -> id_ .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    MULTIPLY        shift and go to state 73
    DIVIDE          shift and go to state 74
    POWER           shift and go to state 75

  ! MULTIPLY        [ reduce using rule 101 (factor -> id_ .) ]
  ! DIVIDE          [ reduce using rule 101 (factor -> id_ .) ]
  ! PLUS            [ reduce using rule 101 (factor -> id_ .) ]
  ! MINUS           [ reduce using rule 101 (factor -> id_ .) ]
  ! COMMA           [ reduce using rule 101 (factor -> id_ .) ]
  ! NEWLINE         [ reduce using rule 101 (factor -> id_ .) ]
  ! EQUALS          [ reduce using rule 101 (factor -> id_ .) ]
  ! NOT_EQUALS      [ reduce using rule 101 (factor -> id_ .) ]
  ! LESS_THAN       [ reduce using rule 101 (factor -> id_ .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 101 (factor -> id_ .) ]
  ! GREATER_THAN    [ reduce using rule 101 (factor -> id_ .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 101 (factor -> id_ .) ]
  ! AND             [ reduce using rule 101 (factor -> id_ .) ]
  ! OR              [ reduce using rule 101 (factor -> id_ .) ]
  ! NEWLINE         [ reduce using rule 81 (comparison_expr_base -> id_ .) ]
  ! EQUALS          [ reduce using rule 86 (all_types -> id_ .) ]
  ! NOT_EQUALS      [ reduce using rule 86 (all_types -> id_ .) ]
  ! LESS_THAN       [ reduce using rule 86 (all_types -> id_ .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 86 (all_types -> id_ .) ]
  ! GREATER_THAN    [ reduce using rule 86 (all_types -> id_ .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 86 (all_types -> id_ .) ]
  ! AND             [ reduce using rule 86 (all_types -> id_ .) ]
  ! OR              [ reduce using rule 86 (all_types -> id_ .) ]
  ! COMMA           [ reduce using rule 86 (all_types -> id_ .) ]
  ! NEWLINE         [ reduce using rule 86 (all_types -> id_ .) ]

    arithmetic_op                  shift and go to state 67

state 21

    (21) class_decl -> CLASS . ID COLON block
    (22) class_decl -> CLASS . ID L_PARENTHESE id_ R_PARENTHESE COLON block

    ID              shift and go to state 76


state 22

    (140) id_ -> ID .

    EQUAL_ASSIGN    reduce using rule 140 (id_ -> ID .)
    DOT             reduce using rule 140 (id_ -> ID .)
    L_BRACKET       reduce using rule 140 (id_ -> ID .)
    L_PARENTHESE    reduce using rule 140 (id_ -> ID .)
    PLUS            reduce using rule 140 (id_ -> ID .)
    MINUS           reduce using rule 140 (id_ -> ID .)
    MULTIPLY        reduce using rule 140 (id_ -> ID .)
    DIVIDE          reduce using rule 140 (id_ -> ID .)
    POWER           reduce using rule 140 (id_ -> ID .)
    NEWLINE         reduce using rule 140 (id_ -> ID .)
    COMMA           reduce using rule 140 (id_ -> ID .)
    EQUALS          reduce using rule 140 (id_ -> ID .)
    NOT_EQUALS      reduce using rule 140 (id_ -> ID .)
    LESS_THAN       reduce using rule 140 (id_ -> ID .)
    LESS_THAN_OR_EQ reduce using rule 140 (id_ -> ID .)
    GREATER_THAN    reduce using rule 140 (id_ -> ID .)
    GREATER_THAN_OR_EQ reduce using rule 140 (id_ -> ID .)
    AND             reduce using rule 140 (id_ -> ID .)
    OR              reduce using rule 140 (id_ -> ID .)
    R_PARENTHESE    reduce using rule 140 (id_ -> ID .)
    COLON           reduce using rule 140 (id_ -> ID .)
    IN              reduce using rule 140 (id_ -> ID .)
    IMPORT          reduce using rule 140 (id_ -> ID .)
    R_BRACKET       reduce using rule 140 (id_ -> ID .)


state 23

    (63) expression -> L_PARENTHESE . expression R_PARENTHESE
    (102) factor -> L_PARENTHESE . arithmetic_expression R_PARENTHESE
    (84) comparison_expr_base -> L_PARENTHESE . comparison_expressions R_PARENTHESE
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (67) comparison_expressions -> . comparison_expr_OR
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (154) number -> . DIGIT
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    ID              shift and go to state 22
    SELF            shift and go to state 81
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 77
    arithmetic_expression          shift and go to state 78
    comparison_expressions         shift and go to state 79
    function_call_expression       shift and go to state 44
    term                           shift and go to state 47
    comparison_expr_OR             shift and go to state 45
    id_                            shift and go to state 80
    factor                         shift and go to state 49
    comparison_expr_AND            shift and go to state 48
    list_element                   shift and go to state 40
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_high_prec      shift and go to state 50
    number                         shift and go to state 55
    comparison_expr_base           shift and go to state 53
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 24

    (23) method_decl -> METHOD_DEF . ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> METHOD_DEF . ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> METHOD_DEF . ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> METHOD_DEF . ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> METHOD_DEF . ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> METHOD_DEF . ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> METHOD_DEF . ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> METHOD_DEF . ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> METHOD_DEF . ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> METHOD_DEF . ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> METHOD_DEF . ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> METHOD_DEF . ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block

    ID              shift and go to state 82


state 25

    (159) reserved_words_statement -> SELF .
    (142) id_ -> SELF . DOT id_

    NEWLINE         reduce using rule 159 (reserved_words_statement -> SELF .)
    DOT             shift and go to state 83


state 26

    (38) if_stmnt -> IF . expression COLON block
    (39) if_stmnt -> IF . expression COLON block elif_stmnt
    (40) if_stmnt -> IF . expression COLON block else_statement
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    ID              shift and go to state 22
    SELF            shift and go to state 81
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 84
    comparison_expressions         shift and go to state 43
    arithmetic_expression          shift and go to state 36
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    id_                            shift and go to state 80
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    list_element                   shift and go to state 40
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 27

    (57) expressions -> expression .
    (58) expressions -> expression . COMMA expressions

    NEWLINE         reduce using rule 57 (expressions -> expression .)
    R_PARENTHESE    reduce using rule 57 (expressions -> expression .)
    COMMA           shift and go to state 85


state 28

    (41) elif_stmnt -> ELSE_IF . expression COLON block
    (42) elif_stmnt -> ELSE_IF . expression COLON block elif_stmnt
    (43) elif_stmnt -> ELSE_IF . expression COLON block else_statement
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    ID              shift and go to state 22
    SELF            shift and go to state 81
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 86
    comparison_expressions         shift and go to state 43
    arithmetic_expression          shift and go to state 36
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    id_                            shift and go to state 80
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    list_element                   shift and go to state 40
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 29

    (44) else_statement -> ELSE . COLON block

    COLON           shift and go to state 87


state 30

    (45) for_statement -> FOR . for_stmnt_parameter_wrapper COLON block
    (46) for_stmnt_parameter_wrapper -> . id_ IN RANGE L_PARENTHESE expression R_PARENTHESE
    (47) for_stmnt_parameter_wrapper -> . id_ IN RANGE L_PARENTHESE integer_number R_PARENTHESE
    (48) for_stmnt_parameter_wrapper -> . id_ IN RANGE L_PARENTHESE integer_number COMMA integer_number R_PARENTHESE
    (49) for_stmnt_parameter_wrapper -> . id_ IN RANGE L_PARENTHESE integer_number COMMA integer_number COMMA integer_number R_PARENTHESE
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    ID              shift and go to state 22
    SELF            shift and go to state 81

    for_stmnt_parameter_wrapper    shift and go to state 88
    id_                            shift and go to state 89
    list_element                   shift and go to state 40

state 31

    (50) while_statement -> WHILE . expression COLON block
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    ID              shift and go to state 22
    SELF            shift and go to state 81
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 90
    comparison_expressions         shift and go to state 43
    arithmetic_expression          shift and go to state 36
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    id_                            shift and go to state 80
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    list_element                   shift and go to state 40
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 32

    (155) reserved_words_statement -> PASS .

    NEWLINE         reduce using rule 155 (reserved_words_statement -> PASS .)


state 33

    (156) reserved_words_statement -> RETURN .
    (53) return_statement -> RETURN . expression
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         reduce using rule 156 (reserved_words_statement -> RETURN .)
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    ID              shift and go to state 22
    SELF            shift and go to state 81
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 91
    comparison_expressions         shift and go to state 43
    arithmetic_expression          shift and go to state 36
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    id_                            shift and go to state 80
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    list_element                   shift and go to state 40
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 34

    (157) reserved_words_statement -> CONTINUE .

    NEWLINE         reduce using rule 157 (reserved_words_statement -> CONTINUE .)


state 35

    (158) reserved_words_statement -> BREAK .

    NEWLINE         reduce using rule 158 (reserved_words_statement -> BREAK .)


state 36

    (61) expression -> arithmetic_expression .
    (92) arithmetic_expression -> arithmetic_expression . PLUS term
    (93) arithmetic_expression -> arithmetic_expression . MINUS term
    (82) comparison_expr_base -> arithmetic_expression .

  ! reduce/reduce conflict for COMMA resolved using rule 61 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 61 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for COLON resolved using rule 61 (expression -> arithmetic_expression .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 61 (expression -> arithmetic_expression .)
    COMMA           reduce using rule 61 (expression -> arithmetic_expression .)
    NEWLINE         reduce using rule 61 (expression -> arithmetic_expression .)
    COLON           reduce using rule 61 (expression -> arithmetic_expression .)
    R_PARENTHESE    reduce using rule 61 (expression -> arithmetic_expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    EQUALS          reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    NOT_EQUALS      reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    LESS_THAN       reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    LESS_THAN_OR_EQ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    GREATER_THAN    reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    GREATER_THAN_OR_EQ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    AND             reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    OR              reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)

  ! COMMA           [ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .) ]
  ! NEWLINE         [ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .) ]
  ! COLON           [ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .) ]
  ! R_PARENTHESE    [ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .) ]


state 37

    (56) expressions_wrapper -> expressions .

    NEWLINE         reduce using rule 56 (expressions_wrapper -> expressions .)
    R_PARENTHESE    reduce using rule 56 (expressions_wrapper -> expressions .)


state 38

    (51) import_statement -> IMPORT . id_
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    ID              shift and go to state 22
    SELF            shift and go to state 81

    id_                            shift and go to state 94
    list_element                   shift and go to state 40

state 39

    (52) import_statement -> FROM . id_ IMPORT id_
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    ID              shift and go to state 22
    SELF            shift and go to state 81

    id_                            shift and go to state 95
    list_element                   shift and go to state 40

state 40

    (143) id_ -> list_element .

    EQUAL_ASSIGN    reduce using rule 143 (id_ -> list_element .)
    DOT             reduce using rule 143 (id_ -> list_element .)
    L_BRACKET       reduce using rule 143 (id_ -> list_element .)
    L_PARENTHESE    reduce using rule 143 (id_ -> list_element .)
    PLUS            reduce using rule 143 (id_ -> list_element .)
    MINUS           reduce using rule 143 (id_ -> list_element .)
    MULTIPLY        reduce using rule 143 (id_ -> list_element .)
    DIVIDE          reduce using rule 143 (id_ -> list_element .)
    POWER           reduce using rule 143 (id_ -> list_element .)
    NEWLINE         reduce using rule 143 (id_ -> list_element .)
    COMMA           reduce using rule 143 (id_ -> list_element .)
    EQUALS          reduce using rule 143 (id_ -> list_element .)
    NOT_EQUALS      reduce using rule 143 (id_ -> list_element .)
    LESS_THAN       reduce using rule 143 (id_ -> list_element .)
    LESS_THAN_OR_EQ reduce using rule 143 (id_ -> list_element .)
    GREATER_THAN    reduce using rule 143 (id_ -> list_element .)
    GREATER_THAN_OR_EQ reduce using rule 143 (id_ -> list_element .)
    AND             reduce using rule 143 (id_ -> list_element .)
    OR              reduce using rule 143 (id_ -> list_element .)
    R_PARENTHESE    reduce using rule 143 (id_ -> list_element .)
    COLON           reduce using rule 143 (id_ -> list_element .)
    IN              reduce using rule 143 (id_ -> list_element .)
    IMPORT          reduce using rule 143 (id_ -> list_element .)
    R_BRACKET       reduce using rule 143 (id_ -> list_element .)


state 41

    (105) list_object -> L_BRACKET . R_BRACKET
    (106) list_object -> L_BRACKET . types_one_or_more_in_commas R_BRACKET
    (107) list_object -> L_BRACKET . ids_one_or_more_in_commas R_BRACKET
    (112) types_one_or_more_in_commas -> . all_types
    (113) types_one_or_more_in_commas -> . all_types COMMA integer_number_one_or_more_in_commas
    (114) types_one_or_more_in_commas -> . all_types COMMA boolean_types_one_or_more_in_commas
    (115) types_one_or_more_in_commas -> . all_types COMMA float_number_one_or_more_in_commas
    (116) types_one_or_more_in_commas -> . all_types COMMA string_object_one_or_more_in_commas
    (117) types_one_or_more_in_commas -> . all_types COMMA ids_one_or_more_in_commas
    (110) ids_one_or_more_in_commas -> . id_
    (111) ids_one_or_more_in_commas -> . id_ COMMA types_one_or_more_in_commas
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (154) number -> . DIGIT

    R_BRACKET       shift and go to state 96
    ID              shift and go to state 22
    SELF            shift and go to state 81
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    types_one_or_more_in_commas    shift and go to state 97
    ids_one_or_more_in_commas      shift and go to state 98
    all_types                      shift and go to state 99
    id_                            shift and go to state 100
    boolean_types                  shift and go to state 58
    integer_number                 shift and go to state 101
    float_number                   shift and go to state 102
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    number                         shift and go to state 55

state 42

    (59) expression -> LEN . L_PARENTHESE expressions_wrapper R_PARENTHESE

    L_PARENTHESE    shift and go to state 103


state 43

    (60) expression -> comparison_expressions .

    COMMA           reduce using rule 60 (expression -> comparison_expressions .)
    NEWLINE         reduce using rule 60 (expression -> comparison_expressions .)
    COLON           reduce using rule 60 (expression -> comparison_expressions .)
    R_PARENTHESE    reduce using rule 60 (expression -> comparison_expressions .)


state 44

    (62) expression -> function_call_expression .
    (98) term -> function_call_expression .
    (83) comparison_expr_base -> function_call_expression .

  ! reduce/reduce conflict for COMMA resolved using rule 62 (expression -> function_call_expression .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 62 (expression -> function_call_expression .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 62 (expression -> function_call_expression .)
  ! reduce/reduce conflict for COLON resolved using rule 62 (expression -> function_call_expression .)
  ! reduce/reduce conflict for EQUALS resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for AND resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for OR resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 62 (expression -> function_call_expression .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 62 (expression -> function_call_expression .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 62 (expression -> function_call_expression .)
  ! reduce/reduce conflict for COLON resolved using rule 62 (expression -> function_call_expression .)
    COMMA           reduce using rule 62 (expression -> function_call_expression .)
    NEWLINE         reduce using rule 62 (expression -> function_call_expression .)
    R_PARENTHESE    reduce using rule 62 (expression -> function_call_expression .)
    COLON           reduce using rule 62 (expression -> function_call_expression .)
    MULTIPLY        reduce using rule 98 (term -> function_call_expression .)
    DIVIDE          reduce using rule 98 (term -> function_call_expression .)
    PLUS            reduce using rule 98 (term -> function_call_expression .)
    MINUS           reduce using rule 98 (term -> function_call_expression .)
    EQUALS          reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    NOT_EQUALS      reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    LESS_THAN       reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    LESS_THAN_OR_EQ reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    GREATER_THAN    reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    GREATER_THAN_OR_EQ reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    AND             reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    OR              reduce using rule 83 (comparison_expr_base -> function_call_expression .)

  ! COMMA           [ reduce using rule 98 (term -> function_call_expression .) ]
  ! NEWLINE         [ reduce using rule 98 (term -> function_call_expression .) ]
  ! EQUALS          [ reduce using rule 98 (term -> function_call_expression .) ]
  ! NOT_EQUALS      [ reduce using rule 98 (term -> function_call_expression .) ]
  ! LESS_THAN       [ reduce using rule 98 (term -> function_call_expression .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 98 (term -> function_call_expression .) ]
  ! GREATER_THAN    [ reduce using rule 98 (term -> function_call_expression .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 98 (term -> function_call_expression .) ]
  ! AND             [ reduce using rule 98 (term -> function_call_expression .) ]
  ! OR              [ reduce using rule 98 (term -> function_call_expression .) ]
  ! R_PARENTHESE    [ reduce using rule 98 (term -> function_call_expression .) ]
  ! COLON           [ reduce using rule 98 (term -> function_call_expression .) ]
  ! COMMA           [ reduce using rule 83 (comparison_expr_base -> function_call_expression .) ]
  ! NEWLINE         [ reduce using rule 83 (comparison_expr_base -> function_call_expression .) ]
  ! R_PARENTHESE    [ reduce using rule 83 (comparison_expr_base -> function_call_expression .) ]
  ! COLON           [ reduce using rule 83 (comparison_expr_base -> function_call_expression .) ]


state 45

    (67) comparison_expressions -> comparison_expr_OR .
    (68) comparison_expr_OR -> comparison_expr_OR . OR comparison_expr_AND

    COMMA           reduce using rule 67 (comparison_expressions -> comparison_expr_OR .)
    NEWLINE         reduce using rule 67 (comparison_expressions -> comparison_expr_OR .)
    R_PARENTHESE    reduce using rule 67 (comparison_expressions -> comparison_expr_OR .)
    COLON           reduce using rule 67 (comparison_expressions -> comparison_expr_OR .)
    OR              shift and go to state 104


state 46

    (91) arithmetic_expression -> MINUS . arithmetic_expression
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (154) number -> . DIGIT
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    MINUS           shift and go to state 46
    L_PARENTHESE    shift and go to state 110
    ID              shift and go to state 22
    SELF            shift and go to state 81
    DIGIT           shift and go to state 57

    arithmetic_expression          shift and go to state 105
    term                           shift and go to state 47
    factor                         shift and go to state 49
    function_call_expression       shift and go to state 106
    integer_number                 shift and go to state 107
    float_number                   shift and go to state 108
    id_                            shift and go to state 109
    number                         shift and go to state 55
    list_element                   shift and go to state 40

state 47

    (94) arithmetic_expression -> term .
    (95) term -> term . MULTIPLY factor
    (96) term -> term . DIVIDE factor

    PLUS            reduce using rule 94 (arithmetic_expression -> term .)
    MINUS           reduce using rule 94 (arithmetic_expression -> term .)
    COMMA           reduce using rule 94 (arithmetic_expression -> term .)
    NEWLINE         reduce using rule 94 (arithmetic_expression -> term .)
    EQUALS          reduce using rule 94 (arithmetic_expression -> term .)
    NOT_EQUALS      reduce using rule 94 (arithmetic_expression -> term .)
    LESS_THAN       reduce using rule 94 (arithmetic_expression -> term .)
    LESS_THAN_OR_EQ reduce using rule 94 (arithmetic_expression -> term .)
    GREATER_THAN    reduce using rule 94 (arithmetic_expression -> term .)
    GREATER_THAN_OR_EQ reduce using rule 94 (arithmetic_expression -> term .)
    AND             reduce using rule 94 (arithmetic_expression -> term .)
    OR              reduce using rule 94 (arithmetic_expression -> term .)
    R_PARENTHESE    reduce using rule 94 (arithmetic_expression -> term .)
    COLON           reduce using rule 94 (arithmetic_expression -> term .)
    R_BRACKET       reduce using rule 94 (arithmetic_expression -> term .)
    MULTIPLY        shift and go to state 111
    DIVIDE          shift and go to state 112


state 48

    (69) comparison_expr_OR -> comparison_expr_AND .
    (70) comparison_expr_AND -> comparison_expr_AND . AND comparison_expr_high_prec

    OR              reduce using rule 69 (comparison_expr_OR -> comparison_expr_AND .)
    COMMA           reduce using rule 69 (comparison_expr_OR -> comparison_expr_AND .)
    NEWLINE         reduce using rule 69 (comparison_expr_OR -> comparison_expr_AND .)
    R_PARENTHESE    reduce using rule 69 (comparison_expr_OR -> comparison_expr_AND .)
    COLON           reduce using rule 69 (comparison_expr_OR -> comparison_expr_AND .)
    AND             shift and go to state 113


state 49

    (97) term -> factor .

    MULTIPLY        reduce using rule 97 (term -> factor .)
    DIVIDE          reduce using rule 97 (term -> factor .)
    PLUS            reduce using rule 97 (term -> factor .)
    MINUS           reduce using rule 97 (term -> factor .)
    COMMA           reduce using rule 97 (term -> factor .)
    NEWLINE         reduce using rule 97 (term -> factor .)
    EQUALS          reduce using rule 97 (term -> factor .)
    NOT_EQUALS      reduce using rule 97 (term -> factor .)
    LESS_THAN       reduce using rule 97 (term -> factor .)
    LESS_THAN_OR_EQ reduce using rule 97 (term -> factor .)
    GREATER_THAN    reduce using rule 97 (term -> factor .)
    GREATER_THAN_OR_EQ reduce using rule 97 (term -> factor .)
    AND             reduce using rule 97 (term -> factor .)
    OR              reduce using rule 97 (term -> factor .)
    R_PARENTHESE    reduce using rule 97 (term -> factor .)
    COLON           reduce using rule 97 (term -> factor .)
    R_BRACKET       reduce using rule 97 (term -> factor .)


state 50

    (71) comparison_expr_AND -> comparison_expr_high_prec .
    (72) comparison_expr_high_prec -> comparison_expr_high_prec . EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> comparison_expr_high_prec . NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> comparison_expr_high_prec . LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> comparison_expr_high_prec . LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> comparison_expr_high_prec . GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> comparison_expr_high_prec . GREATER_THAN_OR_EQ comparison_expr_base

    AND             reduce using rule 71 (comparison_expr_AND -> comparison_expr_high_prec .)
    OR              reduce using rule 71 (comparison_expr_AND -> comparison_expr_high_prec .)
    COMMA           reduce using rule 71 (comparison_expr_AND -> comparison_expr_high_prec .)
    NEWLINE         reduce using rule 71 (comparison_expr_AND -> comparison_expr_high_prec .)
    R_PARENTHESE    reduce using rule 71 (comparison_expr_AND -> comparison_expr_high_prec .)
    COLON           reduce using rule 71 (comparison_expr_AND -> comparison_expr_high_prec .)
    EQUALS          shift and go to state 114
    NOT_EQUALS      shift and go to state 115
    LESS_THAN       shift and go to state 116
    LESS_THAN_OR_EQ shift and go to state 117
    GREATER_THAN    shift and go to state 118
    GREATER_THAN_OR_EQ shift and go to state 119


state 51

    (99) factor -> integer_number .
    (87) all_types -> integer_number .

  ! reduce/reduce conflict for EQUALS resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for AND resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for OR resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for COMMA resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for COLON resolved using rule 87 (all_types -> integer_number .)
    MULTIPLY        reduce using rule 99 (factor -> integer_number .)
    DIVIDE          reduce using rule 99 (factor -> integer_number .)
    PLUS            reduce using rule 99 (factor -> integer_number .)
    MINUS           reduce using rule 99 (factor -> integer_number .)
    EQUALS          reduce using rule 87 (all_types -> integer_number .)
    NOT_EQUALS      reduce using rule 87 (all_types -> integer_number .)
    LESS_THAN       reduce using rule 87 (all_types -> integer_number .)
    LESS_THAN_OR_EQ reduce using rule 87 (all_types -> integer_number .)
    GREATER_THAN    reduce using rule 87 (all_types -> integer_number .)
    GREATER_THAN_OR_EQ reduce using rule 87 (all_types -> integer_number .)
    AND             reduce using rule 87 (all_types -> integer_number .)
    OR              reduce using rule 87 (all_types -> integer_number .)
    COMMA           reduce using rule 87 (all_types -> integer_number .)
    NEWLINE         reduce using rule 87 (all_types -> integer_number .)
    R_PARENTHESE    reduce using rule 87 (all_types -> integer_number .)
    COLON           reduce using rule 87 (all_types -> integer_number .)

  ! COMMA           [ reduce using rule 99 (factor -> integer_number .) ]
  ! NEWLINE         [ reduce using rule 99 (factor -> integer_number .) ]
  ! EQUALS          [ reduce using rule 99 (factor -> integer_number .) ]
  ! NOT_EQUALS      [ reduce using rule 99 (factor -> integer_number .) ]
  ! LESS_THAN       [ reduce using rule 99 (factor -> integer_number .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 99 (factor -> integer_number .) ]
  ! GREATER_THAN    [ reduce using rule 99 (factor -> integer_number .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 99 (factor -> integer_number .) ]
  ! AND             [ reduce using rule 99 (factor -> integer_number .) ]
  ! OR              [ reduce using rule 99 (factor -> integer_number .) ]
  ! R_PARENTHESE    [ reduce using rule 99 (factor -> integer_number .) ]
  ! COLON           [ reduce using rule 99 (factor -> integer_number .) ]


state 52

    (100) factor -> float_number .
    (88) all_types -> float_number .

  ! reduce/reduce conflict for EQUALS resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for AND resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for OR resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for COMMA resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for COLON resolved using rule 88 (all_types -> float_number .)
    MULTIPLY        reduce using rule 100 (factor -> float_number .)
    DIVIDE          reduce using rule 100 (factor -> float_number .)
    PLUS            reduce using rule 100 (factor -> float_number .)
    MINUS           reduce using rule 100 (factor -> float_number .)
    EQUALS          reduce using rule 88 (all_types -> float_number .)
    NOT_EQUALS      reduce using rule 88 (all_types -> float_number .)
    LESS_THAN       reduce using rule 88 (all_types -> float_number .)
    LESS_THAN_OR_EQ reduce using rule 88 (all_types -> float_number .)
    GREATER_THAN    reduce using rule 88 (all_types -> float_number .)
    GREATER_THAN_OR_EQ reduce using rule 88 (all_types -> float_number .)
    AND             reduce using rule 88 (all_types -> float_number .)
    OR              reduce using rule 88 (all_types -> float_number .)
    COMMA           reduce using rule 88 (all_types -> float_number .)
    NEWLINE         reduce using rule 88 (all_types -> float_number .)
    R_PARENTHESE    reduce using rule 88 (all_types -> float_number .)
    COLON           reduce using rule 88 (all_types -> float_number .)

  ! COMMA           [ reduce using rule 100 (factor -> float_number .) ]
  ! NEWLINE         [ reduce using rule 100 (factor -> float_number .) ]
  ! EQUALS          [ reduce using rule 100 (factor -> float_number .) ]
  ! NOT_EQUALS      [ reduce using rule 100 (factor -> float_number .) ]
  ! LESS_THAN       [ reduce using rule 100 (factor -> float_number .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 100 (factor -> float_number .) ]
  ! GREATER_THAN    [ reduce using rule 100 (factor -> float_number .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 100 (factor -> float_number .) ]
  ! AND             [ reduce using rule 100 (factor -> float_number .) ]
  ! OR              [ reduce using rule 100 (factor -> float_number .) ]
  ! R_PARENTHESE    [ reduce using rule 100 (factor -> float_number .) ]
  ! COLON           [ reduce using rule 100 (factor -> float_number .) ]


state 53

    (78) comparison_expr_high_prec -> comparison_expr_base .

    EQUALS          reduce using rule 78 (comparison_expr_high_prec -> comparison_expr_base .)
    NOT_EQUALS      reduce using rule 78 (comparison_expr_high_prec -> comparison_expr_base .)
    LESS_THAN       reduce using rule 78 (comparison_expr_high_prec -> comparison_expr_base .)
    LESS_THAN_OR_EQ reduce using rule 78 (comparison_expr_high_prec -> comparison_expr_base .)
    GREATER_THAN    reduce using rule 78 (comparison_expr_high_prec -> comparison_expr_base .)
    GREATER_THAN_OR_EQ reduce using rule 78 (comparison_expr_high_prec -> comparison_expr_base .)
    AND             reduce using rule 78 (comparison_expr_high_prec -> comparison_expr_base .)
    OR              reduce using rule 78 (comparison_expr_high_prec -> comparison_expr_base .)
    COMMA           reduce using rule 78 (comparison_expr_high_prec -> comparison_expr_base .)
    NEWLINE         reduce using rule 78 (comparison_expr_high_prec -> comparison_expr_base .)
    R_PARENTHESE    reduce using rule 78 (comparison_expr_high_prec -> comparison_expr_base .)
    COLON           reduce using rule 78 (comparison_expr_high_prec -> comparison_expr_base .)


state 54

    (79) comparison_expr_high_prec -> NOT . comparison_expr_base
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (154) number -> . DIGIT
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE

    L_PARENTHESE    shift and go to state 124
    ID              shift and go to state 22
    SELF            shift and go to state 81
    MINUS           shift and go to state 46
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    comparison_expr_base           shift and go to state 120
    all_types                      shift and go to state 56
    id_                            shift and go to state 121
    arithmetic_expression          shift and go to state 122
    function_call_expression       shift and go to state 123
    boolean_types                  shift and go to state 58
    integer_number                 shift and go to state 125
    float_number                   shift and go to state 126
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    term                           shift and go to state 47
    number                         shift and go to state 55
    factor                         shift and go to state 49

state 55

    (153) integer_number -> number .
    (152) float_number -> number . DOT number

    MULTIPLY        reduce using rule 153 (integer_number -> number .)
    DIVIDE          reduce using rule 153 (integer_number -> number .)
    PLUS            reduce using rule 153 (integer_number -> number .)
    MINUS           reduce using rule 153 (integer_number -> number .)
    COMMA           reduce using rule 153 (integer_number -> number .)
    NEWLINE         reduce using rule 153 (integer_number -> number .)
    EQUALS          reduce using rule 153 (integer_number -> number .)
    NOT_EQUALS      reduce using rule 153 (integer_number -> number .)
    LESS_THAN       reduce using rule 153 (integer_number -> number .)
    LESS_THAN_OR_EQ reduce using rule 153 (integer_number -> number .)
    GREATER_THAN    reduce using rule 153 (integer_number -> number .)
    GREATER_THAN_OR_EQ reduce using rule 153 (integer_number -> number .)
    AND             reduce using rule 153 (integer_number -> number .)
    OR              reduce using rule 153 (integer_number -> number .)
    R_PARENTHESE    reduce using rule 153 (integer_number -> number .)
    COLON           reduce using rule 153 (integer_number -> number .)
    R_BRACKET       reduce using rule 153 (integer_number -> number .)
    DOT             shift and go to state 127


state 56

    (80) comparison_expr_base -> all_types .

    EQUALS          reduce using rule 80 (comparison_expr_base -> all_types .)
    NOT_EQUALS      reduce using rule 80 (comparison_expr_base -> all_types .)
    LESS_THAN       reduce using rule 80 (comparison_expr_base -> all_types .)
    LESS_THAN_OR_EQ reduce using rule 80 (comparison_expr_base -> all_types .)
    GREATER_THAN    reduce using rule 80 (comparison_expr_base -> all_types .)
    GREATER_THAN_OR_EQ reduce using rule 80 (comparison_expr_base -> all_types .)
    AND             reduce using rule 80 (comparison_expr_base -> all_types .)
    OR              reduce using rule 80 (comparison_expr_base -> all_types .)
    COMMA           reduce using rule 80 (comparison_expr_base -> all_types .)
    NEWLINE         reduce using rule 80 (comparison_expr_base -> all_types .)
    R_PARENTHESE    reduce using rule 80 (comparison_expr_base -> all_types .)
    COLON           reduce using rule 80 (comparison_expr_base -> all_types .)


state 57

    (154) number -> DIGIT .

    DOT             reduce using rule 154 (number -> DIGIT .)
    MULTIPLY        reduce using rule 154 (number -> DIGIT .)
    DIVIDE          reduce using rule 154 (number -> DIGIT .)
    PLUS            reduce using rule 154 (number -> DIGIT .)
    MINUS           reduce using rule 154 (number -> DIGIT .)
    COMMA           reduce using rule 154 (number -> DIGIT .)
    NEWLINE         reduce using rule 154 (number -> DIGIT .)
    EQUALS          reduce using rule 154 (number -> DIGIT .)
    NOT_EQUALS      reduce using rule 154 (number -> DIGIT .)
    LESS_THAN       reduce using rule 154 (number -> DIGIT .)
    LESS_THAN_OR_EQ reduce using rule 154 (number -> DIGIT .)
    GREATER_THAN    reduce using rule 154 (number -> DIGIT .)
    GREATER_THAN_OR_EQ reduce using rule 154 (number -> DIGIT .)
    AND             reduce using rule 154 (number -> DIGIT .)
    OR              reduce using rule 154 (number -> DIGIT .)
    R_PARENTHESE    reduce using rule 154 (number -> DIGIT .)
    COLON           reduce using rule 154 (number -> DIGIT .)
    R_BRACKET       reduce using rule 154 (number -> DIGIT .)


state 58

    (85) all_types -> boolean_types .

    EQUALS          reduce using rule 85 (all_types -> boolean_types .)
    NOT_EQUALS      reduce using rule 85 (all_types -> boolean_types .)
    LESS_THAN       reduce using rule 85 (all_types -> boolean_types .)
    LESS_THAN_OR_EQ reduce using rule 85 (all_types -> boolean_types .)
    GREATER_THAN    reduce using rule 85 (all_types -> boolean_types .)
    GREATER_THAN_OR_EQ reduce using rule 85 (all_types -> boolean_types .)
    AND             reduce using rule 85 (all_types -> boolean_types .)
    OR              reduce using rule 85 (all_types -> boolean_types .)
    COMMA           reduce using rule 85 (all_types -> boolean_types .)
    NEWLINE         reduce using rule 85 (all_types -> boolean_types .)
    R_PARENTHESE    reduce using rule 85 (all_types -> boolean_types .)
    COLON           reduce using rule 85 (all_types -> boolean_types .)
    R_BRACKET       reduce using rule 85 (all_types -> boolean_types .)


state 59

    (89) all_types -> string_object .

    EQUALS          reduce using rule 89 (all_types -> string_object .)
    NOT_EQUALS      reduce using rule 89 (all_types -> string_object .)
    LESS_THAN       reduce using rule 89 (all_types -> string_object .)
    LESS_THAN_OR_EQ reduce using rule 89 (all_types -> string_object .)
    GREATER_THAN    reduce using rule 89 (all_types -> string_object .)
    GREATER_THAN_OR_EQ reduce using rule 89 (all_types -> string_object .)
    AND             reduce using rule 89 (all_types -> string_object .)
    OR              reduce using rule 89 (all_types -> string_object .)
    COMMA           reduce using rule 89 (all_types -> string_object .)
    NEWLINE         reduce using rule 89 (all_types -> string_object .)
    R_PARENTHESE    reduce using rule 89 (all_types -> string_object .)
    COLON           reduce using rule 89 (all_types -> string_object .)
    R_BRACKET       reduce using rule 89 (all_types -> string_object .)


state 60

    (90) all_types -> list_object .

    EQUALS          reduce using rule 90 (all_types -> list_object .)
    NOT_EQUALS      reduce using rule 90 (all_types -> list_object .)
    LESS_THAN       reduce using rule 90 (all_types -> list_object .)
    LESS_THAN_OR_EQ reduce using rule 90 (all_types -> list_object .)
    GREATER_THAN    reduce using rule 90 (all_types -> list_object .)
    GREATER_THAN_OR_EQ reduce using rule 90 (all_types -> list_object .)
    AND             reduce using rule 90 (all_types -> list_object .)
    OR              reduce using rule 90 (all_types -> list_object .)
    COMMA           reduce using rule 90 (all_types -> list_object .)
    NEWLINE         reduce using rule 90 (all_types -> list_object .)
    R_PARENTHESE    reduce using rule 90 (all_types -> list_object .)
    COLON           reduce using rule 90 (all_types -> list_object .)
    R_BRACKET       reduce using rule 90 (all_types -> list_object .)


state 61

    (150) boolean_types -> TRUE .

    EQUALS          reduce using rule 150 (boolean_types -> TRUE .)
    NOT_EQUALS      reduce using rule 150 (boolean_types -> TRUE .)
    LESS_THAN       reduce using rule 150 (boolean_types -> TRUE .)
    LESS_THAN_OR_EQ reduce using rule 150 (boolean_types -> TRUE .)
    GREATER_THAN    reduce using rule 150 (boolean_types -> TRUE .)
    GREATER_THAN_OR_EQ reduce using rule 150 (boolean_types -> TRUE .)
    AND             reduce using rule 150 (boolean_types -> TRUE .)
    OR              reduce using rule 150 (boolean_types -> TRUE .)
    COMMA           reduce using rule 150 (boolean_types -> TRUE .)
    NEWLINE         reduce using rule 150 (boolean_types -> TRUE .)
    R_PARENTHESE    reduce using rule 150 (boolean_types -> TRUE .)
    COLON           reduce using rule 150 (boolean_types -> TRUE .)
    R_BRACKET       reduce using rule 150 (boolean_types -> TRUE .)


state 62

    (151) boolean_types -> FALSE .

    EQUALS          reduce using rule 151 (boolean_types -> FALSE .)
    NOT_EQUALS      reduce using rule 151 (boolean_types -> FALSE .)
    LESS_THAN       reduce using rule 151 (boolean_types -> FALSE .)
    LESS_THAN_OR_EQ reduce using rule 151 (boolean_types -> FALSE .)
    GREATER_THAN    reduce using rule 151 (boolean_types -> FALSE .)
    GREATER_THAN_OR_EQ reduce using rule 151 (boolean_types -> FALSE .)
    AND             reduce using rule 151 (boolean_types -> FALSE .)
    OR              reduce using rule 151 (boolean_types -> FALSE .)
    COMMA           reduce using rule 151 (boolean_types -> FALSE .)
    NEWLINE         reduce using rule 151 (boolean_types -> FALSE .)
    R_PARENTHESE    reduce using rule 151 (boolean_types -> FALSE .)
    COLON           reduce using rule 151 (boolean_types -> FALSE .)
    R_BRACKET       reduce using rule 151 (boolean_types -> FALSE .)


state 63

    (149) string_object -> STRING_LITERAL .

    EQUALS          reduce using rule 149 (string_object -> STRING_LITERAL .)
    NOT_EQUALS      reduce using rule 149 (string_object -> STRING_LITERAL .)
    LESS_THAN       reduce using rule 149 (string_object -> STRING_LITERAL .)
    LESS_THAN_OR_EQ reduce using rule 149 (string_object -> STRING_LITERAL .)
    GREATER_THAN    reduce using rule 149 (string_object -> STRING_LITERAL .)
    GREATER_THAN_OR_EQ reduce using rule 149 (string_object -> STRING_LITERAL .)
    AND             reduce using rule 149 (string_object -> STRING_LITERAL .)
    OR              reduce using rule 149 (string_object -> STRING_LITERAL .)
    COMMA           reduce using rule 149 (string_object -> STRING_LITERAL .)
    NEWLINE         reduce using rule 149 (string_object -> STRING_LITERAL .)
    R_PARENTHESE    reduce using rule 149 (string_object -> STRING_LITERAL .)
    COLON           reduce using rule 149 (string_object -> STRING_LITERAL .)
    R_BRACKET       reduce using rule 149 (string_object -> STRING_LITERAL .)


state 64

    (3) statements -> statement statements .

    $end            reduce using rule 3 (statements -> statement statements .)
    NEWLINE         reduce using rule 3 (statements -> statement statements .)
    CLASS           reduce using rule 3 (statements -> statement statements .)
    METHOD_DEF      reduce using rule 3 (statements -> statement statements .)
    IF              reduce using rule 3 (statements -> statement statements .)
    ELSE_IF         reduce using rule 3 (statements -> statement statements .)
    ELSE            reduce using rule 3 (statements -> statement statements .)
    FOR             reduce using rule 3 (statements -> statement statements .)
    WHILE           reduce using rule 3 (statements -> statement statements .)
    PASS            reduce using rule 3 (statements -> statement statements .)
    RETURN          reduce using rule 3 (statements -> statement statements .)
    CONTINUE        reduce using rule 3 (statements -> statement statements .)
    BREAK           reduce using rule 3 (statements -> statement statements .)
    SELF            reduce using rule 3 (statements -> statement statements .)
    IMPORT          reduce using rule 3 (statements -> statement statements .)
    FROM            reduce using rule 3 (statements -> statement statements .)
    ID              reduce using rule 3 (statements -> statement statements .)
    LEN             reduce using rule 3 (statements -> statement statements .)
    L_PARENTHESE    reduce using rule 3 (statements -> statement statements .)
    MINUS           reduce using rule 3 (statements -> statement statements .)
    NOT             reduce using rule 3 (statements -> statement statements .)
    DIGIT           reduce using rule 3 (statements -> statement statements .)
    TRUE            reduce using rule 3 (statements -> statement statements .)
    FALSE           reduce using rule 3 (statements -> statement statements .)
    STRING_LITERAL  reduce using rule 3 (statements -> statement statements .)
    L_BRACKET       reduce using rule 3 (statements -> statement statements .)
    DEDENT          reduce using rule 3 (statements -> statement statements .)


state 65

    (7) simple_statements -> simple_statement NEWLINE .

    NEWLINE         reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    CLASS           reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    METHOD_DEF      reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    IF              reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    ELSE_IF         reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    ELSE            reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    FOR             reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    WHILE           reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    PASS            reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    RETURN          reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    CONTINUE        reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    BREAK           reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    SELF            reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    IMPORT          reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    FROM            reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    ID              reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    LEN             reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    L_PARENTHESE    reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    MINUS           reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    NOT             reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    DIGIT           reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    TRUE            reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    FALSE           reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    STRING_LITERAL  reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    L_BRACKET       reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    $end            reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)
    DEDENT          reduce using rule 7 (simple_statements -> simple_statement NEWLINE .)


state 66

    (103) variable_assignment -> id_ EQUAL_ASSIGN . expression
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    ID              shift and go to state 22
    SELF            shift and go to state 81
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    id_                            shift and go to state 80
    expression                     shift and go to state 128
    comparison_expressions         shift and go to state 43
    arithmetic_expression          shift and go to state 36
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    list_element                   shift and go to state 40
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 67

    (104) variable_assignment -> id_ arithmetic_op . EQUAL_ASSIGN arithmetic_expression

    EQUAL_ASSIGN    shift and go to state 129


state 68

    (141) id_ -> id_ DOT . id_
    (66) function_call_expression -> id_ DOT . function_call_expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    ID              shift and go to state 22
    SELF            shift and go to state 81

    id_                            shift and go to state 130
    function_call_expression       shift and go to state 131
    list_element                   shift and go to state 40

state 69

    (108) list_element -> id_ L_BRACKET . arithmetic_expression R_BRACKET
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (154) number -> . DIGIT
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    MINUS           shift and go to state 46
    L_PARENTHESE    shift and go to state 110
    ID              shift and go to state 22
    SELF            shift and go to state 81
    DIGIT           shift and go to state 57

    id_                            shift and go to state 109
    arithmetic_expression          shift and go to state 132
    term                           shift and go to state 47
    factor                         shift and go to state 49
    function_call_expression       shift and go to state 106
    integer_number                 shift and go to state 107
    float_number                   shift and go to state 108
    number                         shift and go to state 55
    list_element                   shift and go to state 40

state 70

    (64) function_call_expression -> id_ L_PARENTHESE . expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> id_ L_PARENTHESE . R_PARENTHESE
    (56) expressions_wrapper -> . expressions
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    R_PARENTHESE    shift and go to state 134
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    ID              shift and go to state 22
    SELF            shift and go to state 81
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    id_                            shift and go to state 80
    expressions_wrapper            shift and go to state 133
    expressions                    shift and go to state 37
    expression                     shift and go to state 27
    comparison_expressions         shift and go to state 43
    arithmetic_expression          shift and go to state 36
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    list_element                   shift and go to state 40
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 71

    (126) arithmetic_op -> PLUS .

    EQUAL_ASSIGN    reduce using rule 126 (arithmetic_op -> PLUS .)


state 72

    (127) arithmetic_op -> MINUS .

    EQUAL_ASSIGN    reduce using rule 127 (arithmetic_op -> MINUS .)


state 73

    (128) arithmetic_op -> MULTIPLY .

    EQUAL_ASSIGN    reduce using rule 128 (arithmetic_op -> MULTIPLY .)


state 74

    (129) arithmetic_op -> DIVIDE .

    EQUAL_ASSIGN    reduce using rule 129 (arithmetic_op -> DIVIDE .)


state 75

    (130) arithmetic_op -> POWER .

    EQUAL_ASSIGN    reduce using rule 130 (arithmetic_op -> POWER .)


state 76

    (21) class_decl -> CLASS ID . COLON block
    (22) class_decl -> CLASS ID . L_PARENTHESE id_ R_PARENTHESE COLON block

    COLON           shift and go to state 135
    L_PARENTHESE    shift and go to state 136


state 77

    (63) expression -> L_PARENTHESE expression . R_PARENTHESE

    R_PARENTHESE    shift and go to state 137


state 78

    (102) factor -> L_PARENTHESE arithmetic_expression . R_PARENTHESE
    (61) expression -> arithmetic_expression .
    (92) arithmetic_expression -> arithmetic_expression . PLUS term
    (93) arithmetic_expression -> arithmetic_expression . MINUS term
    (82) comparison_expr_base -> arithmetic_expression .

  ! shift/reduce conflict for R_PARENTHESE resolved as shift
  ! shift/reduce conflict for R_PARENTHESE resolved as shift
    R_PARENTHESE    shift and go to state 138
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    EQUALS          reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    NOT_EQUALS      reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    LESS_THAN       reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    LESS_THAN_OR_EQ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    GREATER_THAN    reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    GREATER_THAN_OR_EQ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    AND             reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    OR              reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)

  ! R_PARENTHESE    [ reduce using rule 61 (expression -> arithmetic_expression .) ]
  ! R_PARENTHESE    [ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .) ]


state 79

    (84) comparison_expr_base -> L_PARENTHESE comparison_expressions . R_PARENTHESE
    (60) expression -> comparison_expressions .

  ! shift/reduce conflict for R_PARENTHESE resolved as shift
    R_PARENTHESE    shift and go to state 139

  ! R_PARENTHESE    [ reduce using rule 60 (expression -> comparison_expressions .) ]


state 80

    (64) function_call_expression -> id_ . L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> id_ . L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> id_ . DOT function_call_expression
    (141) id_ -> id_ . DOT id_
    (101) factor -> id_ .
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET
    (81) comparison_expr_base -> id_ .
    (86) all_types -> id_ .

  ! reduce/reduce conflict for EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for AND resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for OR resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for COLON resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for COMMA resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for AND resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for OR resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for COLON resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for COMMA resolved using rule 81 (comparison_expr_base -> id_ .)
    L_PARENTHESE    shift and go to state 70
    DOT             shift and go to state 140
    MULTIPLY        reduce using rule 101 (factor -> id_ .)
    DIVIDE          reduce using rule 101 (factor -> id_ .)
    PLUS            reduce using rule 101 (factor -> id_ .)
    MINUS           reduce using rule 101 (factor -> id_ .)
    L_BRACKET       shift and go to state 69
    EQUALS          reduce using rule 81 (comparison_expr_base -> id_ .)
    NOT_EQUALS      reduce using rule 81 (comparison_expr_base -> id_ .)
    LESS_THAN       reduce using rule 81 (comparison_expr_base -> id_ .)
    LESS_THAN_OR_EQ reduce using rule 81 (comparison_expr_base -> id_ .)
    GREATER_THAN    reduce using rule 81 (comparison_expr_base -> id_ .)
    GREATER_THAN_OR_EQ reduce using rule 81 (comparison_expr_base -> id_ .)
    AND             reduce using rule 81 (comparison_expr_base -> id_ .)
    OR              reduce using rule 81 (comparison_expr_base -> id_ .)
    R_PARENTHESE    reduce using rule 81 (comparison_expr_base -> id_ .)
    COLON           reduce using rule 81 (comparison_expr_base -> id_ .)
    NEWLINE         reduce using rule 81 (comparison_expr_base -> id_ .)
    COMMA           reduce using rule 81 (comparison_expr_base -> id_ .)

  ! R_PARENTHESE    [ reduce using rule 101 (factor -> id_ .) ]
  ! EQUALS          [ reduce using rule 101 (factor -> id_ .) ]
  ! NOT_EQUALS      [ reduce using rule 101 (factor -> id_ .) ]
  ! LESS_THAN       [ reduce using rule 101 (factor -> id_ .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 101 (factor -> id_ .) ]
  ! GREATER_THAN    [ reduce using rule 101 (factor -> id_ .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 101 (factor -> id_ .) ]
  ! AND             [ reduce using rule 101 (factor -> id_ .) ]
  ! OR              [ reduce using rule 101 (factor -> id_ .) ]
  ! COLON           [ reduce using rule 101 (factor -> id_ .) ]
  ! NEWLINE         [ reduce using rule 101 (factor -> id_ .) ]
  ! COMMA           [ reduce using rule 101 (factor -> id_ .) ]
  ! EQUALS          [ reduce using rule 86 (all_types -> id_ .) ]
  ! NOT_EQUALS      [ reduce using rule 86 (all_types -> id_ .) ]
  ! LESS_THAN       [ reduce using rule 86 (all_types -> id_ .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 86 (all_types -> id_ .) ]
  ! GREATER_THAN    [ reduce using rule 86 (all_types -> id_ .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 86 (all_types -> id_ .) ]
  ! AND             [ reduce using rule 86 (all_types -> id_ .) ]
  ! OR              [ reduce using rule 86 (all_types -> id_ .) ]
  ! R_PARENTHESE    [ reduce using rule 86 (all_types -> id_ .) ]
  ! COLON           [ reduce using rule 86 (all_types -> id_ .) ]
  ! NEWLINE         [ reduce using rule 86 (all_types -> id_ .) ]
  ! COMMA           [ reduce using rule 86 (all_types -> id_ .) ]


state 81

    (142) id_ -> SELF . DOT id_

    DOT             shift and go to state 83


state 82

    (23) method_decl -> METHOD_DEF ID . L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> METHOD_DEF ID . L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> METHOD_DEF ID . L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> METHOD_DEF ID . L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> METHOD_DEF ID . L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> METHOD_DEF ID . L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> METHOD_DEF ID . L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> METHOD_DEF ID . L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> METHOD_DEF ID . L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> METHOD_DEF ID . L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> METHOD_DEF ID . L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> METHOD_DEF ID . L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block

    L_PARENTHESE    shift and go to state 141


state 83

    (142) id_ -> SELF DOT . id_
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    ID              shift and go to state 22
    SELF            shift and go to state 81

    id_                            shift and go to state 142
    list_element                   shift and go to state 40

state 84

    (38) if_stmnt -> IF expression . COLON block
    (39) if_stmnt -> IF expression . COLON block elif_stmnt
    (40) if_stmnt -> IF expression . COLON block else_statement

    COLON           shift and go to state 143


state 85

    (58) expressions -> expression COMMA . expressions
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    ID              shift and go to state 22
    SELF            shift and go to state 81
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 27
    expressions                    shift and go to state 144
    comparison_expressions         shift and go to state 43
    arithmetic_expression          shift and go to state 36
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    id_                            shift and go to state 80
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    list_element                   shift and go to state 40
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 86

    (41) elif_stmnt -> ELSE_IF expression . COLON block
    (42) elif_stmnt -> ELSE_IF expression . COLON block elif_stmnt
    (43) elif_stmnt -> ELSE_IF expression . COLON block else_statement

    COLON           shift and go to state 145


state 87

    (44) else_statement -> ELSE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 146
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 88

    (45) for_statement -> FOR for_stmnt_parameter_wrapper . COLON block

    COLON           shift and go to state 149


state 89

    (46) for_stmnt_parameter_wrapper -> id_ . IN RANGE L_PARENTHESE expression R_PARENTHESE
    (47) for_stmnt_parameter_wrapper -> id_ . IN RANGE L_PARENTHESE integer_number R_PARENTHESE
    (48) for_stmnt_parameter_wrapper -> id_ . IN RANGE L_PARENTHESE integer_number COMMA integer_number R_PARENTHESE
    (49) for_stmnt_parameter_wrapper -> id_ . IN RANGE L_PARENTHESE integer_number COMMA integer_number COMMA integer_number R_PARENTHESE
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

    IN              shift and go to state 150
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69


state 90

    (50) while_statement -> WHILE expression . COLON block

    COLON           shift and go to state 152


state 91

    (53) return_statement -> RETURN expression .

    NEWLINE         reduce using rule 53 (return_statement -> RETURN expression .)


state 92

    (92) arithmetic_expression -> arithmetic_expression PLUS . term
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (154) number -> . DIGIT
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    L_PARENTHESE    shift and go to state 110
    ID              shift and go to state 22
    SELF            shift and go to state 81
    DIGIT           shift and go to state 57

    term                           shift and go to state 153
    factor                         shift and go to state 49
    function_call_expression       shift and go to state 106
    integer_number                 shift and go to state 107
    float_number                   shift and go to state 108
    id_                            shift and go to state 109
    number                         shift and go to state 55
    list_element                   shift and go to state 40

state 93

    (93) arithmetic_expression -> arithmetic_expression MINUS . term
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (154) number -> . DIGIT
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    L_PARENTHESE    shift and go to state 110
    ID              shift and go to state 22
    SELF            shift and go to state 81
    DIGIT           shift and go to state 57

    term                           shift and go to state 154
    factor                         shift and go to state 49
    function_call_expression       shift and go to state 106
    integer_number                 shift and go to state 107
    float_number                   shift and go to state 108
    id_                            shift and go to state 109
    number                         shift and go to state 55
    list_element                   shift and go to state 40

state 94

    (51) import_statement -> IMPORT id_ .
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

    NEWLINE         reduce using rule 51 (import_statement -> IMPORT id_ .)
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69


state 95

    (52) import_statement -> FROM id_ . IMPORT id_
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

    IMPORT          shift and go to state 155
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69


state 96

    (105) list_object -> L_BRACKET R_BRACKET .

    EQUALS          reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)
    NOT_EQUALS      reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)
    LESS_THAN       reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)
    LESS_THAN_OR_EQ reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)
    GREATER_THAN    reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)
    GREATER_THAN_OR_EQ reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)
    AND             reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)
    OR              reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)
    COMMA           reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)
    NEWLINE         reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)
    R_PARENTHESE    reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)
    COLON           reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)
    R_BRACKET       reduce using rule 105 (list_object -> L_BRACKET R_BRACKET .)


state 97

    (106) list_object -> L_BRACKET types_one_or_more_in_commas . R_BRACKET

    R_BRACKET       shift and go to state 156


state 98

    (107) list_object -> L_BRACKET ids_one_or_more_in_commas . R_BRACKET

    R_BRACKET       shift and go to state 157


state 99

    (112) types_one_or_more_in_commas -> all_types .
    (113) types_one_or_more_in_commas -> all_types . COMMA integer_number_one_or_more_in_commas
    (114) types_one_or_more_in_commas -> all_types . COMMA boolean_types_one_or_more_in_commas
    (115) types_one_or_more_in_commas -> all_types . COMMA float_number_one_or_more_in_commas
    (116) types_one_or_more_in_commas -> all_types . COMMA string_object_one_or_more_in_commas
    (117) types_one_or_more_in_commas -> all_types . COMMA ids_one_or_more_in_commas

    R_BRACKET       reduce using rule 112 (types_one_or_more_in_commas -> all_types .)
    R_PARENTHESE    reduce using rule 112 (types_one_or_more_in_commas -> all_types .)
    COMMA           shift and go to state 158


state 100

    (110) ids_one_or_more_in_commas -> id_ .
    (111) ids_one_or_more_in_commas -> id_ . COMMA types_one_or_more_in_commas
    (86) all_types -> id_ .
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for R_BRACKET resolved using rule 86 (all_types -> id_ .)
    COMMA           shift and go to state 159
    R_BRACKET       reduce using rule 86 (all_types -> id_ .)
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69

  ! R_BRACKET       [ reduce using rule 110 (ids_one_or_more_in_commas -> id_ .) ]
  ! COMMA           [ reduce using rule 86 (all_types -> id_ .) ]


state 101

    (87) all_types -> integer_number .

    COMMA           reduce using rule 87 (all_types -> integer_number .)
    R_BRACKET       reduce using rule 87 (all_types -> integer_number .)
    R_PARENTHESE    reduce using rule 87 (all_types -> integer_number .)


state 102

    (88) all_types -> float_number .

    COMMA           reduce using rule 88 (all_types -> float_number .)
    R_BRACKET       reduce using rule 88 (all_types -> float_number .)
    R_PARENTHESE    reduce using rule 88 (all_types -> float_number .)


state 103

    (59) expression -> LEN L_PARENTHESE . expressions_wrapper R_PARENTHESE
    (56) expressions_wrapper -> . expressions
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    ID              shift and go to state 22
    SELF            shift and go to state 81
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    expressions_wrapper            shift and go to state 160
    expressions                    shift and go to state 37
    expression                     shift and go to state 27
    comparison_expressions         shift and go to state 43
    arithmetic_expression          shift and go to state 36
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    id_                            shift and go to state 80
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    list_element                   shift and go to state 40
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 104

    (68) comparison_expr_OR -> comparison_expr_OR OR . comparison_expr_AND
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (154) number -> . DIGIT
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE

    NOT             shift and go to state 54
    L_PARENTHESE    shift and go to state 124
    ID              shift and go to state 22
    SELF            shift and go to state 81
    MINUS           shift and go to state 46
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    comparison_expr_AND            shift and go to state 161
    comparison_expr_high_prec      shift and go to state 50
    comparison_expr_base           shift and go to state 53
    all_types                      shift and go to state 56
    id_                            shift and go to state 121
    arithmetic_expression          shift and go to state 122
    function_call_expression       shift and go to state 123
    boolean_types                  shift and go to state 58
    integer_number                 shift and go to state 125
    float_number                   shift and go to state 126
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    term                           shift and go to state 47
    number                         shift and go to state 55
    factor                         shift and go to state 49

state 105

    (91) arithmetic_expression -> MINUS arithmetic_expression .
    (92) arithmetic_expression -> arithmetic_expression . PLUS term
    (93) arithmetic_expression -> arithmetic_expression . MINUS term

    PLUS            reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    MINUS           reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    COMMA           reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    NEWLINE         reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    EQUALS          reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    NOT_EQUALS      reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    LESS_THAN       reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    LESS_THAN_OR_EQ reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    GREATER_THAN    reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    GREATER_THAN_OR_EQ reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    AND             reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    OR              reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    R_PARENTHESE    reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    COLON           reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)
    R_BRACKET       reduce using rule 91 (arithmetic_expression -> MINUS arithmetic_expression .)

  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]


state 106

    (98) term -> function_call_expression .

    MULTIPLY        reduce using rule 98 (term -> function_call_expression .)
    DIVIDE          reduce using rule 98 (term -> function_call_expression .)
    PLUS            reduce using rule 98 (term -> function_call_expression .)
    MINUS           reduce using rule 98 (term -> function_call_expression .)
    COMMA           reduce using rule 98 (term -> function_call_expression .)
    NEWLINE         reduce using rule 98 (term -> function_call_expression .)
    EQUALS          reduce using rule 98 (term -> function_call_expression .)
    NOT_EQUALS      reduce using rule 98 (term -> function_call_expression .)
    LESS_THAN       reduce using rule 98 (term -> function_call_expression .)
    LESS_THAN_OR_EQ reduce using rule 98 (term -> function_call_expression .)
    GREATER_THAN    reduce using rule 98 (term -> function_call_expression .)
    GREATER_THAN_OR_EQ reduce using rule 98 (term -> function_call_expression .)
    AND             reduce using rule 98 (term -> function_call_expression .)
    OR              reduce using rule 98 (term -> function_call_expression .)
    R_PARENTHESE    reduce using rule 98 (term -> function_call_expression .)
    COLON           reduce using rule 98 (term -> function_call_expression .)
    R_BRACKET       reduce using rule 98 (term -> function_call_expression .)


state 107

    (99) factor -> integer_number .

    MULTIPLY        reduce using rule 99 (factor -> integer_number .)
    DIVIDE          reduce using rule 99 (factor -> integer_number .)
    PLUS            reduce using rule 99 (factor -> integer_number .)
    MINUS           reduce using rule 99 (factor -> integer_number .)
    COMMA           reduce using rule 99 (factor -> integer_number .)
    NEWLINE         reduce using rule 99 (factor -> integer_number .)
    EQUALS          reduce using rule 99 (factor -> integer_number .)
    NOT_EQUALS      reduce using rule 99 (factor -> integer_number .)
    LESS_THAN       reduce using rule 99 (factor -> integer_number .)
    LESS_THAN_OR_EQ reduce using rule 99 (factor -> integer_number .)
    GREATER_THAN    reduce using rule 99 (factor -> integer_number .)
    GREATER_THAN_OR_EQ reduce using rule 99 (factor -> integer_number .)
    AND             reduce using rule 99 (factor -> integer_number .)
    OR              reduce using rule 99 (factor -> integer_number .)
    R_PARENTHESE    reduce using rule 99 (factor -> integer_number .)
    COLON           reduce using rule 99 (factor -> integer_number .)
    R_BRACKET       reduce using rule 99 (factor -> integer_number .)


state 108

    (100) factor -> float_number .

    MULTIPLY        reduce using rule 100 (factor -> float_number .)
    DIVIDE          reduce using rule 100 (factor -> float_number .)
    PLUS            reduce using rule 100 (factor -> float_number .)
    MINUS           reduce using rule 100 (factor -> float_number .)
    COMMA           reduce using rule 100 (factor -> float_number .)
    NEWLINE         reduce using rule 100 (factor -> float_number .)
    EQUALS          reduce using rule 100 (factor -> float_number .)
    NOT_EQUALS      reduce using rule 100 (factor -> float_number .)
    LESS_THAN       reduce using rule 100 (factor -> float_number .)
    LESS_THAN_OR_EQ reduce using rule 100 (factor -> float_number .)
    GREATER_THAN    reduce using rule 100 (factor -> float_number .)
    GREATER_THAN_OR_EQ reduce using rule 100 (factor -> float_number .)
    AND             reduce using rule 100 (factor -> float_number .)
    OR              reduce using rule 100 (factor -> float_number .)
    R_PARENTHESE    reduce using rule 100 (factor -> float_number .)
    COLON           reduce using rule 100 (factor -> float_number .)
    R_BRACKET       reduce using rule 100 (factor -> float_number .)


state 109

    (101) factor -> id_ .
    (64) function_call_expression -> id_ . L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> id_ . L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> id_ . DOT function_call_expression
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

    MULTIPLY        reduce using rule 101 (factor -> id_ .)
    DIVIDE          reduce using rule 101 (factor -> id_ .)
    PLUS            reduce using rule 101 (factor -> id_ .)
    MINUS           reduce using rule 101 (factor -> id_ .)
    COMMA           reduce using rule 101 (factor -> id_ .)
    NEWLINE         reduce using rule 101 (factor -> id_ .)
    EQUALS          reduce using rule 101 (factor -> id_ .)
    NOT_EQUALS      reduce using rule 101 (factor -> id_ .)
    LESS_THAN       reduce using rule 101 (factor -> id_ .)
    LESS_THAN_OR_EQ reduce using rule 101 (factor -> id_ .)
    GREATER_THAN    reduce using rule 101 (factor -> id_ .)
    GREATER_THAN_OR_EQ reduce using rule 101 (factor -> id_ .)
    AND             reduce using rule 101 (factor -> id_ .)
    OR              reduce using rule 101 (factor -> id_ .)
    R_PARENTHESE    reduce using rule 101 (factor -> id_ .)
    COLON           reduce using rule 101 (factor -> id_ .)
    R_BRACKET       reduce using rule 101 (factor -> id_ .)
    L_PARENTHESE    shift and go to state 70
    DOT             shift and go to state 140
    L_BRACKET       shift and go to state 69


state 110

    (102) factor -> L_PARENTHESE . arithmetic_expression R_PARENTHESE
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (154) number -> . DIGIT
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    MINUS           shift and go to state 46
    L_PARENTHESE    shift and go to state 110
    ID              shift and go to state 22
    SELF            shift and go to state 81
    DIGIT           shift and go to state 57

    arithmetic_expression          shift and go to state 162
    term                           shift and go to state 47
    factor                         shift and go to state 49
    function_call_expression       shift and go to state 106
    integer_number                 shift and go to state 107
    float_number                   shift and go to state 108
    id_                            shift and go to state 109
    number                         shift and go to state 55
    list_element                   shift and go to state 40

state 111

    (95) term -> term MULTIPLY . factor
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (154) number -> . DIGIT
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    L_PARENTHESE    shift and go to state 110
    ID              shift and go to state 22
    SELF            shift and go to state 81
    DIGIT           shift and go to state 57

    factor                         shift and go to state 163
    integer_number                 shift and go to state 107
    float_number                   shift and go to state 108
    id_                            shift and go to state 164
    number                         shift and go to state 55
    list_element                   shift and go to state 40

state 112

    (96) term -> term DIVIDE . factor
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (154) number -> . DIGIT
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    L_PARENTHESE    shift and go to state 110
    ID              shift and go to state 22
    SELF            shift and go to state 81
    DIGIT           shift and go to state 57

    factor                         shift and go to state 165
    integer_number                 shift and go to state 107
    float_number                   shift and go to state 108
    id_                            shift and go to state 164
    number                         shift and go to state 55
    list_element                   shift and go to state 40

state 113

    (70) comparison_expr_AND -> comparison_expr_AND AND . comparison_expr_high_prec
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (154) number -> . DIGIT
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE

    NOT             shift and go to state 54
    L_PARENTHESE    shift and go to state 124
    ID              shift and go to state 22
    SELF            shift and go to state 81
    MINUS           shift and go to state 46
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    comparison_expr_high_prec      shift and go to state 166
    comparison_expr_base           shift and go to state 53
    all_types                      shift and go to state 56
    id_                            shift and go to state 121
    arithmetic_expression          shift and go to state 122
    function_call_expression       shift and go to state 123
    boolean_types                  shift and go to state 58
    integer_number                 shift and go to state 125
    float_number                   shift and go to state 126
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    term                           shift and go to state 47
    number                         shift and go to state 55
    factor                         shift and go to state 49

state 114

    (72) comparison_expr_high_prec -> comparison_expr_high_prec EQUALS . comparison_expr_base
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (154) number -> . DIGIT
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE

    L_PARENTHESE    shift and go to state 124
    ID              shift and go to state 22
    SELF            shift and go to state 81
    MINUS           shift and go to state 46
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    comparison_expr_base           shift and go to state 167
    all_types                      shift and go to state 56
    id_                            shift and go to state 121
    arithmetic_expression          shift and go to state 122
    function_call_expression       shift and go to state 123
    boolean_types                  shift and go to state 58
    integer_number                 shift and go to state 125
    float_number                   shift and go to state 126
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    term                           shift and go to state 47
    number                         shift and go to state 55
    factor                         shift and go to state 49

state 115

    (73) comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS . comparison_expr_base
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (154) number -> . DIGIT
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE

    L_PARENTHESE    shift and go to state 124
    ID              shift and go to state 22
    SELF            shift and go to state 81
    MINUS           shift and go to state 46
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    comparison_expr_base           shift and go to state 168
    all_types                      shift and go to state 56
    id_                            shift and go to state 121
    arithmetic_expression          shift and go to state 122
    function_call_expression       shift and go to state 123
    boolean_types                  shift and go to state 58
    integer_number                 shift and go to state 125
    float_number                   shift and go to state 126
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    term                           shift and go to state 47
    number                         shift and go to state 55
    factor                         shift and go to state 49

state 116

    (74) comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN . comparison_expr_base
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (154) number -> . DIGIT
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE

    L_PARENTHESE    shift and go to state 124
    ID              shift and go to state 22
    SELF            shift and go to state 81
    MINUS           shift and go to state 46
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    comparison_expr_base           shift and go to state 169
    all_types                      shift and go to state 56
    id_                            shift and go to state 121
    arithmetic_expression          shift and go to state 122
    function_call_expression       shift and go to state 123
    boolean_types                  shift and go to state 58
    integer_number                 shift and go to state 125
    float_number                   shift and go to state 126
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    term                           shift and go to state 47
    number                         shift and go to state 55
    factor                         shift and go to state 49

state 117

    (75) comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ . comparison_expr_base
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (154) number -> . DIGIT
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE

    L_PARENTHESE    shift and go to state 124
    ID              shift and go to state 22
    SELF            shift and go to state 81
    MINUS           shift and go to state 46
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    comparison_expr_base           shift and go to state 170
    all_types                      shift and go to state 56
    id_                            shift and go to state 121
    arithmetic_expression          shift and go to state 122
    function_call_expression       shift and go to state 123
    boolean_types                  shift and go to state 58
    integer_number                 shift and go to state 125
    float_number                   shift and go to state 126
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    term                           shift and go to state 47
    number                         shift and go to state 55
    factor                         shift and go to state 49

state 118

    (76) comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN . comparison_expr_base
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (154) number -> . DIGIT
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE

    L_PARENTHESE    shift and go to state 124
    ID              shift and go to state 22
    SELF            shift and go to state 81
    MINUS           shift and go to state 46
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    comparison_expr_base           shift and go to state 171
    all_types                      shift and go to state 56
    id_                            shift and go to state 121
    arithmetic_expression          shift and go to state 122
    function_call_expression       shift and go to state 123
    boolean_types                  shift and go to state 58
    integer_number                 shift and go to state 125
    float_number                   shift and go to state 126
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    term                           shift and go to state 47
    number                         shift and go to state 55
    factor                         shift and go to state 49

state 119

    (77) comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ . comparison_expr_base
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (154) number -> . DIGIT
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE

    L_PARENTHESE    shift and go to state 124
    ID              shift and go to state 22
    SELF            shift and go to state 81
    MINUS           shift and go to state 46
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    comparison_expr_base           shift and go to state 172
    all_types                      shift and go to state 56
    id_                            shift and go to state 121
    arithmetic_expression          shift and go to state 122
    function_call_expression       shift and go to state 123
    boolean_types                  shift and go to state 58
    integer_number                 shift and go to state 125
    float_number                   shift and go to state 126
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    term                           shift and go to state 47
    number                         shift and go to state 55
    factor                         shift and go to state 49

state 120

    (79) comparison_expr_high_prec -> NOT comparison_expr_base .

    EQUALS          reduce using rule 79 (comparison_expr_high_prec -> NOT comparison_expr_base .)
    NOT_EQUALS      reduce using rule 79 (comparison_expr_high_prec -> NOT comparison_expr_base .)
    LESS_THAN       reduce using rule 79 (comparison_expr_high_prec -> NOT comparison_expr_base .)
    LESS_THAN_OR_EQ reduce using rule 79 (comparison_expr_high_prec -> NOT comparison_expr_base .)
    GREATER_THAN    reduce using rule 79 (comparison_expr_high_prec -> NOT comparison_expr_base .)
    GREATER_THAN_OR_EQ reduce using rule 79 (comparison_expr_high_prec -> NOT comparison_expr_base .)
    AND             reduce using rule 79 (comparison_expr_high_prec -> NOT comparison_expr_base .)
    OR              reduce using rule 79 (comparison_expr_high_prec -> NOT comparison_expr_base .)
    COMMA           reduce using rule 79 (comparison_expr_high_prec -> NOT comparison_expr_base .)
    NEWLINE         reduce using rule 79 (comparison_expr_high_prec -> NOT comparison_expr_base .)
    R_PARENTHESE    reduce using rule 79 (comparison_expr_high_prec -> NOT comparison_expr_base .)
    COLON           reduce using rule 79 (comparison_expr_high_prec -> NOT comparison_expr_base .)


state 121

    (81) comparison_expr_base -> id_ .
    (86) all_types -> id_ .
    (141) id_ -> id_ . DOT id_
    (64) function_call_expression -> id_ . L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> id_ . L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> id_ . DOT function_call_expression
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET
    (101) factor -> id_ .

  ! reduce/reduce conflict for EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for AND resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for OR resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for COMMA resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for COLON resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for AND resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for OR resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for COMMA resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for COLON resolved using rule 81 (comparison_expr_base -> id_ .)
    EQUALS          reduce using rule 81 (comparison_expr_base -> id_ .)
    NOT_EQUALS      reduce using rule 81 (comparison_expr_base -> id_ .)
    LESS_THAN       reduce using rule 81 (comparison_expr_base -> id_ .)
    LESS_THAN_OR_EQ reduce using rule 81 (comparison_expr_base -> id_ .)
    GREATER_THAN    reduce using rule 81 (comparison_expr_base -> id_ .)
    GREATER_THAN_OR_EQ reduce using rule 81 (comparison_expr_base -> id_ .)
    AND             reduce using rule 81 (comparison_expr_base -> id_ .)
    OR              reduce using rule 81 (comparison_expr_base -> id_ .)
    COMMA           reduce using rule 81 (comparison_expr_base -> id_ .)
    NEWLINE         reduce using rule 81 (comparison_expr_base -> id_ .)
    R_PARENTHESE    reduce using rule 81 (comparison_expr_base -> id_ .)
    COLON           reduce using rule 81 (comparison_expr_base -> id_ .)
    DOT             shift and go to state 68
    L_PARENTHESE    shift and go to state 70
    L_BRACKET       shift and go to state 69
    MULTIPLY        reduce using rule 101 (factor -> id_ .)
    DIVIDE          reduce using rule 101 (factor -> id_ .)
    PLUS            reduce using rule 101 (factor -> id_ .)
    MINUS           reduce using rule 101 (factor -> id_ .)

  ! EQUALS          [ reduce using rule 86 (all_types -> id_ .) ]
  ! NOT_EQUALS      [ reduce using rule 86 (all_types -> id_ .) ]
  ! LESS_THAN       [ reduce using rule 86 (all_types -> id_ .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 86 (all_types -> id_ .) ]
  ! GREATER_THAN    [ reduce using rule 86 (all_types -> id_ .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 86 (all_types -> id_ .) ]
  ! AND             [ reduce using rule 86 (all_types -> id_ .) ]
  ! OR              [ reduce using rule 86 (all_types -> id_ .) ]
  ! COMMA           [ reduce using rule 86 (all_types -> id_ .) ]
  ! NEWLINE         [ reduce using rule 86 (all_types -> id_ .) ]
  ! R_PARENTHESE    [ reduce using rule 86 (all_types -> id_ .) ]
  ! COLON           [ reduce using rule 86 (all_types -> id_ .) ]
  ! EQUALS          [ reduce using rule 101 (factor -> id_ .) ]
  ! NOT_EQUALS      [ reduce using rule 101 (factor -> id_ .) ]
  ! LESS_THAN       [ reduce using rule 101 (factor -> id_ .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 101 (factor -> id_ .) ]
  ! GREATER_THAN    [ reduce using rule 101 (factor -> id_ .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 101 (factor -> id_ .) ]
  ! AND             [ reduce using rule 101 (factor -> id_ .) ]
  ! OR              [ reduce using rule 101 (factor -> id_ .) ]
  ! COMMA           [ reduce using rule 101 (factor -> id_ .) ]
  ! NEWLINE         [ reduce using rule 101 (factor -> id_ .) ]
  ! R_PARENTHESE    [ reduce using rule 101 (factor -> id_ .) ]
  ! COLON           [ reduce using rule 101 (factor -> id_ .) ]


state 122

    (82) comparison_expr_base -> arithmetic_expression .
    (92) arithmetic_expression -> arithmetic_expression . PLUS term
    (93) arithmetic_expression -> arithmetic_expression . MINUS term

    EQUALS          reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    NOT_EQUALS      reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    LESS_THAN       reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    LESS_THAN_OR_EQ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    GREATER_THAN    reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    GREATER_THAN_OR_EQ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    AND             reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    OR              reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    COMMA           reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    NEWLINE         reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    R_PARENTHESE    reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    COLON           reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93


state 123

    (83) comparison_expr_base -> function_call_expression .
    (98) term -> function_call_expression .

  ! reduce/reduce conflict for EQUALS resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for AND resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for OR resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for COLON resolved using rule 83 (comparison_expr_base -> function_call_expression .)
    EQUALS          reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    NOT_EQUALS      reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    LESS_THAN       reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    LESS_THAN_OR_EQ reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    GREATER_THAN    reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    GREATER_THAN_OR_EQ reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    AND             reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    OR              reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    COMMA           reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    NEWLINE         reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    R_PARENTHESE    reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    COLON           reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    MULTIPLY        reduce using rule 98 (term -> function_call_expression .)
    DIVIDE          reduce using rule 98 (term -> function_call_expression .)
    PLUS            reduce using rule 98 (term -> function_call_expression .)
    MINUS           reduce using rule 98 (term -> function_call_expression .)

  ! EQUALS          [ reduce using rule 98 (term -> function_call_expression .) ]
  ! NOT_EQUALS      [ reduce using rule 98 (term -> function_call_expression .) ]
  ! LESS_THAN       [ reduce using rule 98 (term -> function_call_expression .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 98 (term -> function_call_expression .) ]
  ! GREATER_THAN    [ reduce using rule 98 (term -> function_call_expression .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 98 (term -> function_call_expression .) ]
  ! AND             [ reduce using rule 98 (term -> function_call_expression .) ]
  ! OR              [ reduce using rule 98 (term -> function_call_expression .) ]
  ! COMMA           [ reduce using rule 98 (term -> function_call_expression .) ]
  ! NEWLINE         [ reduce using rule 98 (term -> function_call_expression .) ]
  ! R_PARENTHESE    [ reduce using rule 98 (term -> function_call_expression .) ]
  ! COLON           [ reduce using rule 98 (term -> function_call_expression .) ]


state 124

    (84) comparison_expr_base -> L_PARENTHESE . comparison_expressions R_PARENTHESE
    (102) factor -> L_PARENTHESE . arithmetic_expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    MINUS           shift and go to state 46
    L_PARENTHESE    shift and go to state 173
    NOT             shift and go to state 54
    ID              shift and go to state 22
    SELF            shift and go to state 81
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    comparison_expressions         shift and go to state 174
    arithmetic_expression          shift and go to state 175
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    function_call_expression       shift and go to state 176
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    id_                            shift and go to state 177
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    list_element                   shift and go to state 40
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 125

    (87) all_types -> integer_number .
    (99) factor -> integer_number .

  ! reduce/reduce conflict for EQUALS resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for AND resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for OR resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for COMMA resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for COLON resolved using rule 87 (all_types -> integer_number .)
    EQUALS          reduce using rule 87 (all_types -> integer_number .)
    NOT_EQUALS      reduce using rule 87 (all_types -> integer_number .)
    LESS_THAN       reduce using rule 87 (all_types -> integer_number .)
    LESS_THAN_OR_EQ reduce using rule 87 (all_types -> integer_number .)
    GREATER_THAN    reduce using rule 87 (all_types -> integer_number .)
    GREATER_THAN_OR_EQ reduce using rule 87 (all_types -> integer_number .)
    AND             reduce using rule 87 (all_types -> integer_number .)
    OR              reduce using rule 87 (all_types -> integer_number .)
    COMMA           reduce using rule 87 (all_types -> integer_number .)
    NEWLINE         reduce using rule 87 (all_types -> integer_number .)
    R_PARENTHESE    reduce using rule 87 (all_types -> integer_number .)
    COLON           reduce using rule 87 (all_types -> integer_number .)
    MULTIPLY        reduce using rule 99 (factor -> integer_number .)
    DIVIDE          reduce using rule 99 (factor -> integer_number .)
    PLUS            reduce using rule 99 (factor -> integer_number .)
    MINUS           reduce using rule 99 (factor -> integer_number .)

  ! EQUALS          [ reduce using rule 99 (factor -> integer_number .) ]
  ! NOT_EQUALS      [ reduce using rule 99 (factor -> integer_number .) ]
  ! LESS_THAN       [ reduce using rule 99 (factor -> integer_number .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 99 (factor -> integer_number .) ]
  ! GREATER_THAN    [ reduce using rule 99 (factor -> integer_number .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 99 (factor -> integer_number .) ]
  ! AND             [ reduce using rule 99 (factor -> integer_number .) ]
  ! OR              [ reduce using rule 99 (factor -> integer_number .) ]
  ! COMMA           [ reduce using rule 99 (factor -> integer_number .) ]
  ! NEWLINE         [ reduce using rule 99 (factor -> integer_number .) ]
  ! R_PARENTHESE    [ reduce using rule 99 (factor -> integer_number .) ]
  ! COLON           [ reduce using rule 99 (factor -> integer_number .) ]


state 126

    (88) all_types -> float_number .
    (100) factor -> float_number .

  ! reduce/reduce conflict for EQUALS resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for AND resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for OR resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for COMMA resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 88 (all_types -> float_number .)
  ! reduce/reduce conflict for COLON resolved using rule 88 (all_types -> float_number .)
    EQUALS          reduce using rule 88 (all_types -> float_number .)
    NOT_EQUALS      reduce using rule 88 (all_types -> float_number .)
    LESS_THAN       reduce using rule 88 (all_types -> float_number .)
    LESS_THAN_OR_EQ reduce using rule 88 (all_types -> float_number .)
    GREATER_THAN    reduce using rule 88 (all_types -> float_number .)
    GREATER_THAN_OR_EQ reduce using rule 88 (all_types -> float_number .)
    AND             reduce using rule 88 (all_types -> float_number .)
    OR              reduce using rule 88 (all_types -> float_number .)
    COMMA           reduce using rule 88 (all_types -> float_number .)
    NEWLINE         reduce using rule 88 (all_types -> float_number .)
    R_PARENTHESE    reduce using rule 88 (all_types -> float_number .)
    COLON           reduce using rule 88 (all_types -> float_number .)
    MULTIPLY        reduce using rule 100 (factor -> float_number .)
    DIVIDE          reduce using rule 100 (factor -> float_number .)
    PLUS            reduce using rule 100 (factor -> float_number .)
    MINUS           reduce using rule 100 (factor -> float_number .)

  ! EQUALS          [ reduce using rule 100 (factor -> float_number .) ]
  ! NOT_EQUALS      [ reduce using rule 100 (factor -> float_number .) ]
  ! LESS_THAN       [ reduce using rule 100 (factor -> float_number .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 100 (factor -> float_number .) ]
  ! GREATER_THAN    [ reduce using rule 100 (factor -> float_number .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 100 (factor -> float_number .) ]
  ! AND             [ reduce using rule 100 (factor -> float_number .) ]
  ! OR              [ reduce using rule 100 (factor -> float_number .) ]
  ! COMMA           [ reduce using rule 100 (factor -> float_number .) ]
  ! NEWLINE         [ reduce using rule 100 (factor -> float_number .) ]
  ! R_PARENTHESE    [ reduce using rule 100 (factor -> float_number .) ]
  ! COLON           [ reduce using rule 100 (factor -> float_number .) ]


state 127

    (152) float_number -> number DOT . number
    (154) number -> . DIGIT

    DIGIT           shift and go to state 57

    number                         shift and go to state 178

state 128

    (103) variable_assignment -> id_ EQUAL_ASSIGN expression .

    NEWLINE         reduce using rule 103 (variable_assignment -> id_ EQUAL_ASSIGN expression .)


state 129

    (104) variable_assignment -> id_ arithmetic_op EQUAL_ASSIGN . arithmetic_expression
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (154) number -> . DIGIT
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    MINUS           shift and go to state 46
    L_PARENTHESE    shift and go to state 110
    ID              shift and go to state 22
    SELF            shift and go to state 81
    DIGIT           shift and go to state 57

    id_                            shift and go to state 109
    arithmetic_expression          shift and go to state 179
    term                           shift and go to state 47
    factor                         shift and go to state 49
    function_call_expression       shift and go to state 106
    integer_number                 shift and go to state 107
    float_number                   shift and go to state 108
    number                         shift and go to state 55
    list_element                   shift and go to state 40

state 130

    (141) id_ -> id_ DOT id_ .
    (141) id_ -> id_ . DOT id_
    (64) function_call_expression -> id_ . L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> id_ . L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> id_ . DOT function_call_expression
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for L_PARENTHESE resolved as shift
  ! shift/reduce conflict for L_BRACKET resolved as shift
    EQUAL_ASSIGN    reduce using rule 141 (id_ -> id_ DOT id_ .)
    PLUS            reduce using rule 141 (id_ -> id_ DOT id_ .)
    MINUS           reduce using rule 141 (id_ -> id_ DOT id_ .)
    MULTIPLY        reduce using rule 141 (id_ -> id_ DOT id_ .)
    DIVIDE          reduce using rule 141 (id_ -> id_ DOT id_ .)
    POWER           reduce using rule 141 (id_ -> id_ DOT id_ .)
    NEWLINE         reduce using rule 141 (id_ -> id_ DOT id_ .)
    COMMA           reduce using rule 141 (id_ -> id_ DOT id_ .)
    EQUALS          reduce using rule 141 (id_ -> id_ DOT id_ .)
    NOT_EQUALS      reduce using rule 141 (id_ -> id_ DOT id_ .)
    LESS_THAN       reduce using rule 141 (id_ -> id_ DOT id_ .)
    LESS_THAN_OR_EQ reduce using rule 141 (id_ -> id_ DOT id_ .)
    GREATER_THAN    reduce using rule 141 (id_ -> id_ DOT id_ .)
    GREATER_THAN_OR_EQ reduce using rule 141 (id_ -> id_ DOT id_ .)
    AND             reduce using rule 141 (id_ -> id_ DOT id_ .)
    OR              reduce using rule 141 (id_ -> id_ DOT id_ .)
    R_PARENTHESE    reduce using rule 141 (id_ -> id_ DOT id_ .)
    COLON           reduce using rule 141 (id_ -> id_ DOT id_ .)
    DOT             shift and go to state 68
    L_PARENTHESE    shift and go to state 70
    L_BRACKET       shift and go to state 69

  ! DOT             [ reduce using rule 141 (id_ -> id_ DOT id_ .) ]
  ! L_BRACKET       [ reduce using rule 141 (id_ -> id_ DOT id_ .) ]
  ! L_PARENTHESE    [ reduce using rule 141 (id_ -> id_ DOT id_ .) ]


state 131

    (66) function_call_expression -> id_ DOT function_call_expression .

    COMMA           reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    NEWLINE         reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    MULTIPLY        reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    DIVIDE          reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    PLUS            reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    MINUS           reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    EQUALS          reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    NOT_EQUALS      reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    LESS_THAN       reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    LESS_THAN_OR_EQ reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    GREATER_THAN    reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    GREATER_THAN_OR_EQ reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    AND             reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    OR              reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    R_PARENTHESE    reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    COLON           reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)
    R_BRACKET       reduce using rule 66 (function_call_expression -> id_ DOT function_call_expression .)


state 132

    (108) list_element -> id_ L_BRACKET arithmetic_expression . R_BRACKET
    (92) arithmetic_expression -> arithmetic_expression . PLUS term
    (93) arithmetic_expression -> arithmetic_expression . MINUS term

    R_BRACKET       shift and go to state 180
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93


state 133

    (64) function_call_expression -> id_ L_PARENTHESE expressions_wrapper . R_PARENTHESE

    R_PARENTHESE    shift and go to state 181


state 134

    (65) function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .

    COMMA           reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    NEWLINE         reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    MULTIPLY        reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    DIVIDE          reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    PLUS            reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    MINUS           reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    EQUALS          reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    NOT_EQUALS      reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    LESS_THAN       reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    LESS_THAN_OR_EQ reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    GREATER_THAN    reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    GREATER_THAN_OR_EQ reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    AND             reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    OR              reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    R_PARENTHESE    reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    COLON           reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)
    R_BRACKET       reduce using rule 65 (function_call_expression -> id_ L_PARENTHESE R_PARENTHESE .)


state 135

    (21) class_decl -> CLASS ID COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 182
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 136

    (22) class_decl -> CLASS ID L_PARENTHESE . id_ R_PARENTHESE COLON block
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    ID              shift and go to state 22
    SELF            shift and go to state 81

    id_                            shift and go to state 183
    list_element                   shift and go to state 40

state 137

    (63) expression -> L_PARENTHESE expression R_PARENTHESE .

    COMMA           reduce using rule 63 (expression -> L_PARENTHESE expression R_PARENTHESE .)
    NEWLINE         reduce using rule 63 (expression -> L_PARENTHESE expression R_PARENTHESE .)
    R_PARENTHESE    reduce using rule 63 (expression -> L_PARENTHESE expression R_PARENTHESE .)
    COLON           reduce using rule 63 (expression -> L_PARENTHESE expression R_PARENTHESE .)


state 138

    (102) factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .

    MULTIPLY        reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    DIVIDE          reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    PLUS            reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    MINUS           reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    COMMA           reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    NEWLINE         reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    EQUALS          reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    NOT_EQUALS      reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    LESS_THAN       reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    LESS_THAN_OR_EQ reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    GREATER_THAN    reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    GREATER_THAN_OR_EQ reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    AND             reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    OR              reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    R_PARENTHESE    reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    COLON           reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)
    R_BRACKET       reduce using rule 102 (factor -> L_PARENTHESE arithmetic_expression R_PARENTHESE .)


state 139

    (84) comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .

    EQUALS          reduce using rule 84 (comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .)
    NOT_EQUALS      reduce using rule 84 (comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .)
    LESS_THAN       reduce using rule 84 (comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .)
    LESS_THAN_OR_EQ reduce using rule 84 (comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .)
    GREATER_THAN    reduce using rule 84 (comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .)
    GREATER_THAN_OR_EQ reduce using rule 84 (comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .)
    AND             reduce using rule 84 (comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .)
    OR              reduce using rule 84 (comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .)
    COMMA           reduce using rule 84 (comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .)
    NEWLINE         reduce using rule 84 (comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .)
    R_PARENTHESE    reduce using rule 84 (comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .)
    COLON           reduce using rule 84 (comparison_expr_base -> L_PARENTHESE comparison_expressions R_PARENTHESE .)


state 140

    (66) function_call_expression -> id_ DOT . function_call_expression
    (141) id_ -> id_ DOT . id_
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    ID              shift and go to state 22
    SELF            shift and go to state 81

    id_                            shift and go to state 184
    function_call_expression       shift and go to state 131
    list_element                   shift and go to state 40

state 141

    (23) method_decl -> METHOD_DEF ID L_PARENTHESE . R_PARENTHESE COLON block
    (24) method_decl -> METHOD_DEF ID L_PARENTHESE . SELF R_PARENTHESE COLON block
    (25) method_decl -> METHOD_DEF ID L_PARENTHESE . R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> METHOD_DEF ID L_PARENTHESE . SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> METHOD_DEF ID L_PARENTHESE . ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> METHOD_DEF ID L_PARENTHESE . SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> METHOD_DEF ID L_PARENTHESE . ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> METHOD_DEF ID L_PARENTHESE . SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> METHOD_DEF ID L_PARENTHESE . ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> METHOD_DEF ID L_PARENTHESE . SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> METHOD_DEF ID L_PARENTHESE . ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> METHOD_DEF ID L_PARENTHESE . SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (109) ids_one_or_more_in_commas_wrapper -> . ids_one_or_more_in_commas
    (35) ids_one_or_more_in_commas_with_types_wrapper -> . ids_one_or_more_in_commas_with_types
    (110) ids_one_or_more_in_commas -> . id_
    (111) ids_one_or_more_in_commas -> . id_ COMMA types_one_or_more_in_commas
    (36) ids_one_or_more_in_commas_with_types -> . id_ COLON TYPE
    (37) ids_one_or_more_in_commas_with_types -> . id_ COLON TYPE COMMA ids_one_or_more_in_commas_with_types
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    R_PARENTHESE    shift and go to state 185
    SELF            shift and go to state 186
    ID              shift and go to state 22

    ids_one_or_more_in_commas_wrapper shift and go to state 187
    ids_one_or_more_in_commas_with_types_wrapper shift and go to state 188
    ids_one_or_more_in_commas      shift and go to state 189
    ids_one_or_more_in_commas_with_types shift and go to state 190
    id_                            shift and go to state 191
    list_element                   shift and go to state 40

state 142

    (142) id_ -> SELF DOT id_ .
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for L_BRACKET resolved as shift
    EQUAL_ASSIGN    reduce using rule 142 (id_ -> SELF DOT id_ .)
    L_PARENTHESE    reduce using rule 142 (id_ -> SELF DOT id_ .)
    PLUS            reduce using rule 142 (id_ -> SELF DOT id_ .)
    MINUS           reduce using rule 142 (id_ -> SELF DOT id_ .)
    MULTIPLY        reduce using rule 142 (id_ -> SELF DOT id_ .)
    DIVIDE          reduce using rule 142 (id_ -> SELF DOT id_ .)
    POWER           reduce using rule 142 (id_ -> SELF DOT id_ .)
    NEWLINE         reduce using rule 142 (id_ -> SELF DOT id_ .)
    COMMA           reduce using rule 142 (id_ -> SELF DOT id_ .)
    EQUALS          reduce using rule 142 (id_ -> SELF DOT id_ .)
    NOT_EQUALS      reduce using rule 142 (id_ -> SELF DOT id_ .)
    LESS_THAN       reduce using rule 142 (id_ -> SELF DOT id_ .)
    LESS_THAN_OR_EQ reduce using rule 142 (id_ -> SELF DOT id_ .)
    GREATER_THAN    reduce using rule 142 (id_ -> SELF DOT id_ .)
    GREATER_THAN_OR_EQ reduce using rule 142 (id_ -> SELF DOT id_ .)
    AND             reduce using rule 142 (id_ -> SELF DOT id_ .)
    OR              reduce using rule 142 (id_ -> SELF DOT id_ .)
    R_PARENTHESE    reduce using rule 142 (id_ -> SELF DOT id_ .)
    COLON           reduce using rule 142 (id_ -> SELF DOT id_ .)
    IN              reduce using rule 142 (id_ -> SELF DOT id_ .)
    IMPORT          reduce using rule 142 (id_ -> SELF DOT id_ .)
    R_BRACKET       reduce using rule 142 (id_ -> SELF DOT id_ .)
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69

  ! DOT             [ reduce using rule 142 (id_ -> SELF DOT id_ .) ]
  ! L_BRACKET       [ reduce using rule 142 (id_ -> SELF DOT id_ .) ]


state 143

    (38) if_stmnt -> IF expression COLON . block
    (39) if_stmnt -> IF expression COLON . block elif_stmnt
    (40) if_stmnt -> IF expression COLON . block else_statement
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 27
    block                          shift and go to state 192
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 144

    (58) expressions -> expression COMMA expressions .

    NEWLINE         reduce using rule 58 (expressions -> expression COMMA expressions .)
    R_PARENTHESE    reduce using rule 58 (expressions -> expression COMMA expressions .)


state 145

    (41) elif_stmnt -> ELSE_IF expression COLON . block
    (42) elif_stmnt -> ELSE_IF expression COLON . block elif_stmnt
    (43) elif_stmnt -> ELSE_IF expression COLON . block else_statement
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 27
    block                          shift and go to state 193
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 146

    (44) else_statement -> ELSE COLON block .

    NEWLINE         reduce using rule 44 (else_statement -> ELSE COLON block .)
    CLASS           reduce using rule 44 (else_statement -> ELSE COLON block .)
    METHOD_DEF      reduce using rule 44 (else_statement -> ELSE COLON block .)
    IF              reduce using rule 44 (else_statement -> ELSE COLON block .)
    ELSE_IF         reduce using rule 44 (else_statement -> ELSE COLON block .)
    ELSE            reduce using rule 44 (else_statement -> ELSE COLON block .)
    FOR             reduce using rule 44 (else_statement -> ELSE COLON block .)
    WHILE           reduce using rule 44 (else_statement -> ELSE COLON block .)
    PASS            reduce using rule 44 (else_statement -> ELSE COLON block .)
    RETURN          reduce using rule 44 (else_statement -> ELSE COLON block .)
    CONTINUE        reduce using rule 44 (else_statement -> ELSE COLON block .)
    BREAK           reduce using rule 44 (else_statement -> ELSE COLON block .)
    SELF            reduce using rule 44 (else_statement -> ELSE COLON block .)
    IMPORT          reduce using rule 44 (else_statement -> ELSE COLON block .)
    FROM            reduce using rule 44 (else_statement -> ELSE COLON block .)
    ID              reduce using rule 44 (else_statement -> ELSE COLON block .)
    LEN             reduce using rule 44 (else_statement -> ELSE COLON block .)
    L_PARENTHESE    reduce using rule 44 (else_statement -> ELSE COLON block .)
    MINUS           reduce using rule 44 (else_statement -> ELSE COLON block .)
    NOT             reduce using rule 44 (else_statement -> ELSE COLON block .)
    DIGIT           reduce using rule 44 (else_statement -> ELSE COLON block .)
    TRUE            reduce using rule 44 (else_statement -> ELSE COLON block .)
    FALSE           reduce using rule 44 (else_statement -> ELSE COLON block .)
    STRING_LITERAL  reduce using rule 44 (else_statement -> ELSE COLON block .)
    L_BRACKET       reduce using rule 44 (else_statement -> ELSE COLON block .)
    $end            reduce using rule 44 (else_statement -> ELSE COLON block .)
    DEDENT          reduce using rule 44 (else_statement -> ELSE COLON block .)


state 147

    (54) block -> NEWLINE . INDENT statements DEDENT
    (6) statement -> NEWLINE .

    INDENT          shift and go to state 194
    $end            reduce using rule 6 (statement -> NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> NEWLINE .)
    CLASS           reduce using rule 6 (statement -> NEWLINE .)
    METHOD_DEF      reduce using rule 6 (statement -> NEWLINE .)
    IF              reduce using rule 6 (statement -> NEWLINE .)
    ELSE_IF         reduce using rule 6 (statement -> NEWLINE .)
    ELSE            reduce using rule 6 (statement -> NEWLINE .)
    FOR             reduce using rule 6 (statement -> NEWLINE .)
    WHILE           reduce using rule 6 (statement -> NEWLINE .)
    PASS            reduce using rule 6 (statement -> NEWLINE .)
    RETURN          reduce using rule 6 (statement -> NEWLINE .)
    CONTINUE        reduce using rule 6 (statement -> NEWLINE .)
    BREAK           reduce using rule 6 (statement -> NEWLINE .)
    SELF            reduce using rule 6 (statement -> NEWLINE .)
    IMPORT          reduce using rule 6 (statement -> NEWLINE .)
    FROM            reduce using rule 6 (statement -> NEWLINE .)
    ID              reduce using rule 6 (statement -> NEWLINE .)
    LEN             reduce using rule 6 (statement -> NEWLINE .)
    L_PARENTHESE    reduce using rule 6 (statement -> NEWLINE .)
    MINUS           reduce using rule 6 (statement -> NEWLINE .)
    NOT             reduce using rule 6 (statement -> NEWLINE .)
    DIGIT           reduce using rule 6 (statement -> NEWLINE .)
    TRUE            reduce using rule 6 (statement -> NEWLINE .)
    FALSE           reduce using rule 6 (statement -> NEWLINE .)
    STRING_LITERAL  reduce using rule 6 (statement -> NEWLINE .)
    L_BRACKET       reduce using rule 6 (statement -> NEWLINE .)
    DEDENT          reduce using rule 6 (statement -> NEWLINE .)


state 148

    (55) block -> statements .

    $end            reduce using rule 55 (block -> statements .)
    NEWLINE         reduce using rule 55 (block -> statements .)
    CLASS           reduce using rule 55 (block -> statements .)
    METHOD_DEF      reduce using rule 55 (block -> statements .)
    IF              reduce using rule 55 (block -> statements .)
    ELSE_IF         reduce using rule 55 (block -> statements .)
    ELSE            reduce using rule 55 (block -> statements .)
    FOR             reduce using rule 55 (block -> statements .)
    WHILE           reduce using rule 55 (block -> statements .)
    PASS            reduce using rule 55 (block -> statements .)
    RETURN          reduce using rule 55 (block -> statements .)
    CONTINUE        reduce using rule 55 (block -> statements .)
    BREAK           reduce using rule 55 (block -> statements .)
    SELF            reduce using rule 55 (block -> statements .)
    IMPORT          reduce using rule 55 (block -> statements .)
    FROM            reduce using rule 55 (block -> statements .)
    ID              reduce using rule 55 (block -> statements .)
    LEN             reduce using rule 55 (block -> statements .)
    L_PARENTHESE    reduce using rule 55 (block -> statements .)
    MINUS           reduce using rule 55 (block -> statements .)
    NOT             reduce using rule 55 (block -> statements .)
    DIGIT           reduce using rule 55 (block -> statements .)
    TRUE            reduce using rule 55 (block -> statements .)
    FALSE           reduce using rule 55 (block -> statements .)
    STRING_LITERAL  reduce using rule 55 (block -> statements .)
    L_BRACKET       reduce using rule 55 (block -> statements .)
    DEDENT          reduce using rule 55 (block -> statements .)


state 149

    (45) for_statement -> FOR for_stmnt_parameter_wrapper COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 195
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 150

    (46) for_stmnt_parameter_wrapper -> id_ IN . RANGE L_PARENTHESE expression R_PARENTHESE
    (47) for_stmnt_parameter_wrapper -> id_ IN . RANGE L_PARENTHESE integer_number R_PARENTHESE
    (48) for_stmnt_parameter_wrapper -> id_ IN . RANGE L_PARENTHESE integer_number COMMA integer_number R_PARENTHESE
    (49) for_stmnt_parameter_wrapper -> id_ IN . RANGE L_PARENTHESE integer_number COMMA integer_number COMMA integer_number R_PARENTHESE

    RANGE           shift and go to state 196


state 151

    (141) id_ -> id_ DOT . id_
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    ID              shift and go to state 22
    SELF            shift and go to state 81

    id_                            shift and go to state 197
    list_element                   shift and go to state 40

state 152

    (50) while_statement -> WHILE expression COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 27
    block                          shift and go to state 198
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 153

    (92) arithmetic_expression -> arithmetic_expression PLUS term .
    (95) term -> term . MULTIPLY factor
    (96) term -> term . DIVIDE factor

    PLUS            reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    MINUS           reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    COMMA           reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    NEWLINE         reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    EQUALS          reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    NOT_EQUALS      reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    LESS_THAN       reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    LESS_THAN_OR_EQ reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    GREATER_THAN    reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    GREATER_THAN_OR_EQ reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    AND             reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    OR              reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    R_PARENTHESE    reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    COLON           reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    R_BRACKET       reduce using rule 92 (arithmetic_expression -> arithmetic_expression PLUS term .)
    MULTIPLY        shift and go to state 111
    DIVIDE          shift and go to state 112


state 154

    (93) arithmetic_expression -> arithmetic_expression MINUS term .
    (95) term -> term . MULTIPLY factor
    (96) term -> term . DIVIDE factor

    PLUS            reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    MINUS           reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    COMMA           reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    NEWLINE         reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    EQUALS          reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    NOT_EQUALS      reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    LESS_THAN       reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    LESS_THAN_OR_EQ reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    GREATER_THAN    reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    GREATER_THAN_OR_EQ reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    AND             reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    OR              reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    R_PARENTHESE    reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    COLON           reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    R_BRACKET       reduce using rule 93 (arithmetic_expression -> arithmetic_expression MINUS term .)
    MULTIPLY        shift and go to state 111
    DIVIDE          shift and go to state 112


state 155

    (52) import_statement -> FROM id_ IMPORT . id_
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    ID              shift and go to state 22
    SELF            shift and go to state 81

    id_                            shift and go to state 199
    list_element                   shift and go to state 40

state 156

    (106) list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .

    EQUALS          reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)
    NOT_EQUALS      reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)
    LESS_THAN       reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)
    LESS_THAN_OR_EQ reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)
    GREATER_THAN    reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)
    GREATER_THAN_OR_EQ reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)
    AND             reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)
    OR              reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)
    COMMA           reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)
    NEWLINE         reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)
    R_PARENTHESE    reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)
    COLON           reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)
    R_BRACKET       reduce using rule 106 (list_object -> L_BRACKET types_one_or_more_in_commas R_BRACKET .)


state 157

    (107) list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .

    EQUALS          reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)
    NOT_EQUALS      reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)
    LESS_THAN       reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)
    LESS_THAN_OR_EQ reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)
    GREATER_THAN    reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)
    GREATER_THAN_OR_EQ reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)
    AND             reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)
    OR              reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)
    COMMA           reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)
    NEWLINE         reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)
    R_PARENTHESE    reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)
    COLON           reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)
    R_BRACKET       reduce using rule 107 (list_object -> L_BRACKET ids_one_or_more_in_commas R_BRACKET .)


state 158

    (113) types_one_or_more_in_commas -> all_types COMMA . integer_number_one_or_more_in_commas
    (114) types_one_or_more_in_commas -> all_types COMMA . boolean_types_one_or_more_in_commas
    (115) types_one_or_more_in_commas -> all_types COMMA . float_number_one_or_more_in_commas
    (116) types_one_or_more_in_commas -> all_types COMMA . string_object_one_or_more_in_commas
    (117) types_one_or_more_in_commas -> all_types COMMA . ids_one_or_more_in_commas
    (120) integer_number_one_or_more_in_commas -> . integer_number
    (121) integer_number_one_or_more_in_commas -> . integer_number COMMA types_one_or_more_in_commas
    (118) boolean_types_one_or_more_in_commas -> . boolean_types
    (119) boolean_types_one_or_more_in_commas -> . boolean_types COMMA types_one_or_more_in_commas
    (122) float_number_one_or_more_in_commas -> . float_number
    (123) float_number_one_or_more_in_commas -> . float_number COMMA types_one_or_more_in_commas
    (124) string_object_one_or_more_in_commas -> . string_object
    (125) string_object_one_or_more_in_commas -> . string_object COMMA types_one_or_more_in_commas
    (110) ids_one_or_more_in_commas -> . id_
    (111) ids_one_or_more_in_commas -> . id_ COMMA types_one_or_more_in_commas
    (153) integer_number -> . number
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (154) number -> . DIGIT
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    ID              shift and go to state 22
    SELF            shift and go to state 81
    DIGIT           shift and go to state 57

    integer_number_one_or_more_in_commas shift and go to state 200
    boolean_types_one_or_more_in_commas shift and go to state 201
    float_number_one_or_more_in_commas shift and go to state 202
    string_object_one_or_more_in_commas shift and go to state 203
    ids_one_or_more_in_commas      shift and go to state 204
    integer_number                 shift and go to state 205
    boolean_types                  shift and go to state 206
    float_number                   shift and go to state 207
    string_object                  shift and go to state 208
    id_                            shift and go to state 209
    number                         shift and go to state 55
    list_element                   shift and go to state 40

state 159

    (111) ids_one_or_more_in_commas -> id_ COMMA . types_one_or_more_in_commas
    (112) types_one_or_more_in_commas -> . all_types
    (113) types_one_or_more_in_commas -> . all_types COMMA integer_number_one_or_more_in_commas
    (114) types_one_or_more_in_commas -> . all_types COMMA boolean_types_one_or_more_in_commas
    (115) types_one_or_more_in_commas -> . all_types COMMA float_number_one_or_more_in_commas
    (116) types_one_or_more_in_commas -> . all_types COMMA string_object_one_or_more_in_commas
    (117) types_one_or_more_in_commas -> . all_types COMMA ids_one_or_more_in_commas
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (154) number -> . DIGIT

    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 22
    SELF            shift and go to state 81
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    id_                            shift and go to state 210
    types_one_or_more_in_commas    shift and go to state 211
    all_types                      shift and go to state 99
    boolean_types                  shift and go to state 58
    integer_number                 shift and go to state 101
    float_number                   shift and go to state 102
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    number                         shift and go to state 55

state 160

    (59) expression -> LEN L_PARENTHESE expressions_wrapper . R_PARENTHESE

    R_PARENTHESE    shift and go to state 212


state 161

    (68) comparison_expr_OR -> comparison_expr_OR OR comparison_expr_AND .
    (70) comparison_expr_AND -> comparison_expr_AND . AND comparison_expr_high_prec

    OR              reduce using rule 68 (comparison_expr_OR -> comparison_expr_OR OR comparison_expr_AND .)
    COMMA           reduce using rule 68 (comparison_expr_OR -> comparison_expr_OR OR comparison_expr_AND .)
    NEWLINE         reduce using rule 68 (comparison_expr_OR -> comparison_expr_OR OR comparison_expr_AND .)
    R_PARENTHESE    reduce using rule 68 (comparison_expr_OR -> comparison_expr_OR OR comparison_expr_AND .)
    COLON           reduce using rule 68 (comparison_expr_OR -> comparison_expr_OR OR comparison_expr_AND .)
    AND             shift and go to state 113


state 162

    (102) factor -> L_PARENTHESE arithmetic_expression . R_PARENTHESE
    (92) arithmetic_expression -> arithmetic_expression . PLUS term
    (93) arithmetic_expression -> arithmetic_expression . MINUS term

    R_PARENTHESE    shift and go to state 138
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93


state 163

    (95) term -> term MULTIPLY factor .

    MULTIPLY        reduce using rule 95 (term -> term MULTIPLY factor .)
    DIVIDE          reduce using rule 95 (term -> term MULTIPLY factor .)
    PLUS            reduce using rule 95 (term -> term MULTIPLY factor .)
    MINUS           reduce using rule 95 (term -> term MULTIPLY factor .)
    COMMA           reduce using rule 95 (term -> term MULTIPLY factor .)
    NEWLINE         reduce using rule 95 (term -> term MULTIPLY factor .)
    EQUALS          reduce using rule 95 (term -> term MULTIPLY factor .)
    NOT_EQUALS      reduce using rule 95 (term -> term MULTIPLY factor .)
    LESS_THAN       reduce using rule 95 (term -> term MULTIPLY factor .)
    LESS_THAN_OR_EQ reduce using rule 95 (term -> term MULTIPLY factor .)
    GREATER_THAN    reduce using rule 95 (term -> term MULTIPLY factor .)
    GREATER_THAN_OR_EQ reduce using rule 95 (term -> term MULTIPLY factor .)
    AND             reduce using rule 95 (term -> term MULTIPLY factor .)
    OR              reduce using rule 95 (term -> term MULTIPLY factor .)
    R_PARENTHESE    reduce using rule 95 (term -> term MULTIPLY factor .)
    COLON           reduce using rule 95 (term -> term MULTIPLY factor .)
    R_BRACKET       reduce using rule 95 (term -> term MULTIPLY factor .)


state 164

    (101) factor -> id_ .
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

    MULTIPLY        reduce using rule 101 (factor -> id_ .)
    DIVIDE          reduce using rule 101 (factor -> id_ .)
    PLUS            reduce using rule 101 (factor -> id_ .)
    MINUS           reduce using rule 101 (factor -> id_ .)
    COMMA           reduce using rule 101 (factor -> id_ .)
    NEWLINE         reduce using rule 101 (factor -> id_ .)
    EQUALS          reduce using rule 101 (factor -> id_ .)
    NOT_EQUALS      reduce using rule 101 (factor -> id_ .)
    LESS_THAN       reduce using rule 101 (factor -> id_ .)
    LESS_THAN_OR_EQ reduce using rule 101 (factor -> id_ .)
    GREATER_THAN    reduce using rule 101 (factor -> id_ .)
    GREATER_THAN_OR_EQ reduce using rule 101 (factor -> id_ .)
    AND             reduce using rule 101 (factor -> id_ .)
    OR              reduce using rule 101 (factor -> id_ .)
    R_PARENTHESE    reduce using rule 101 (factor -> id_ .)
    COLON           reduce using rule 101 (factor -> id_ .)
    R_BRACKET       reduce using rule 101 (factor -> id_ .)
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69


state 165

    (96) term -> term DIVIDE factor .

    MULTIPLY        reduce using rule 96 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 96 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 96 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 96 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 96 (term -> term DIVIDE factor .)
    NEWLINE         reduce using rule 96 (term -> term DIVIDE factor .)
    EQUALS          reduce using rule 96 (term -> term DIVIDE factor .)
    NOT_EQUALS      reduce using rule 96 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 96 (term -> term DIVIDE factor .)
    LESS_THAN_OR_EQ reduce using rule 96 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 96 (term -> term DIVIDE factor .)
    GREATER_THAN_OR_EQ reduce using rule 96 (term -> term DIVIDE factor .)
    AND             reduce using rule 96 (term -> term DIVIDE factor .)
    OR              reduce using rule 96 (term -> term DIVIDE factor .)
    R_PARENTHESE    reduce using rule 96 (term -> term DIVIDE factor .)
    COLON           reduce using rule 96 (term -> term DIVIDE factor .)
    R_BRACKET       reduce using rule 96 (term -> term DIVIDE factor .)


state 166

    (70) comparison_expr_AND -> comparison_expr_AND AND comparison_expr_high_prec .
    (72) comparison_expr_high_prec -> comparison_expr_high_prec . EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> comparison_expr_high_prec . NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> comparison_expr_high_prec . LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> comparison_expr_high_prec . LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> comparison_expr_high_prec . GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> comparison_expr_high_prec . GREATER_THAN_OR_EQ comparison_expr_base

    AND             reduce using rule 70 (comparison_expr_AND -> comparison_expr_AND AND comparison_expr_high_prec .)
    OR              reduce using rule 70 (comparison_expr_AND -> comparison_expr_AND AND comparison_expr_high_prec .)
    COMMA           reduce using rule 70 (comparison_expr_AND -> comparison_expr_AND AND comparison_expr_high_prec .)
    NEWLINE         reduce using rule 70 (comparison_expr_AND -> comparison_expr_AND AND comparison_expr_high_prec .)
    R_PARENTHESE    reduce using rule 70 (comparison_expr_AND -> comparison_expr_AND AND comparison_expr_high_prec .)
    COLON           reduce using rule 70 (comparison_expr_AND -> comparison_expr_AND AND comparison_expr_high_prec .)
    EQUALS          shift and go to state 114
    NOT_EQUALS      shift and go to state 115
    LESS_THAN       shift and go to state 116
    LESS_THAN_OR_EQ shift and go to state 117
    GREATER_THAN    shift and go to state 118
    GREATER_THAN_OR_EQ shift and go to state 119


state 167

    (72) comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .

    EQUALS          reduce using rule 72 (comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .)
    NOT_EQUALS      reduce using rule 72 (comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .)
    LESS_THAN       reduce using rule 72 (comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .)
    LESS_THAN_OR_EQ reduce using rule 72 (comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .)
    GREATER_THAN    reduce using rule 72 (comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .)
    GREATER_THAN_OR_EQ reduce using rule 72 (comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .)
    AND             reduce using rule 72 (comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .)
    OR              reduce using rule 72 (comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .)
    COMMA           reduce using rule 72 (comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .)
    NEWLINE         reduce using rule 72 (comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .)
    R_PARENTHESE    reduce using rule 72 (comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .)
    COLON           reduce using rule 72 (comparison_expr_high_prec -> comparison_expr_high_prec EQUALS comparison_expr_base .)


state 168

    (73) comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .

    EQUALS          reduce using rule 73 (comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .)
    NOT_EQUALS      reduce using rule 73 (comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .)
    LESS_THAN       reduce using rule 73 (comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .)
    LESS_THAN_OR_EQ reduce using rule 73 (comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .)
    GREATER_THAN    reduce using rule 73 (comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .)
    GREATER_THAN_OR_EQ reduce using rule 73 (comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .)
    AND             reduce using rule 73 (comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .)
    OR              reduce using rule 73 (comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .)
    COMMA           reduce using rule 73 (comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .)
    NEWLINE         reduce using rule 73 (comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .)
    R_PARENTHESE    reduce using rule 73 (comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .)
    COLON           reduce using rule 73 (comparison_expr_high_prec -> comparison_expr_high_prec NOT_EQUALS comparison_expr_base .)


state 169

    (74) comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .

    EQUALS          reduce using rule 74 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .)
    NOT_EQUALS      reduce using rule 74 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .)
    LESS_THAN       reduce using rule 74 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .)
    LESS_THAN_OR_EQ reduce using rule 74 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .)
    GREATER_THAN    reduce using rule 74 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .)
    GREATER_THAN_OR_EQ reduce using rule 74 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .)
    AND             reduce using rule 74 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .)
    OR              reduce using rule 74 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .)
    COMMA           reduce using rule 74 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .)
    NEWLINE         reduce using rule 74 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .)
    R_PARENTHESE    reduce using rule 74 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .)
    COLON           reduce using rule 74 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN comparison_expr_base .)


state 170

    (75) comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .

    EQUALS          reduce using rule 75 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .)
    NOT_EQUALS      reduce using rule 75 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .)
    LESS_THAN       reduce using rule 75 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .)
    LESS_THAN_OR_EQ reduce using rule 75 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .)
    GREATER_THAN    reduce using rule 75 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .)
    GREATER_THAN_OR_EQ reduce using rule 75 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .)
    AND             reduce using rule 75 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .)
    OR              reduce using rule 75 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .)
    COMMA           reduce using rule 75 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .)
    NEWLINE         reduce using rule 75 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .)
    R_PARENTHESE    reduce using rule 75 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .)
    COLON           reduce using rule 75 (comparison_expr_high_prec -> comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base .)


state 171

    (76) comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .

    EQUALS          reduce using rule 76 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .)
    NOT_EQUALS      reduce using rule 76 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .)
    LESS_THAN       reduce using rule 76 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .)
    LESS_THAN_OR_EQ reduce using rule 76 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .)
    GREATER_THAN    reduce using rule 76 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .)
    GREATER_THAN_OR_EQ reduce using rule 76 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .)
    AND             reduce using rule 76 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .)
    OR              reduce using rule 76 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .)
    COMMA           reduce using rule 76 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .)
    NEWLINE         reduce using rule 76 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .)
    R_PARENTHESE    reduce using rule 76 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .)
    COLON           reduce using rule 76 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN comparison_expr_base .)


state 172

    (77) comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .

    EQUALS          reduce using rule 77 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .)
    NOT_EQUALS      reduce using rule 77 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .)
    LESS_THAN       reduce using rule 77 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .)
    LESS_THAN_OR_EQ reduce using rule 77 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .)
    GREATER_THAN    reduce using rule 77 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .)
    GREATER_THAN_OR_EQ reduce using rule 77 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .)
    AND             reduce using rule 77 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .)
    OR              reduce using rule 77 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .)
    COMMA           reduce using rule 77 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .)
    NEWLINE         reduce using rule 77 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .)
    R_PARENTHESE    reduce using rule 77 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .)
    COLON           reduce using rule 77 (comparison_expr_high_prec -> comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base .)


state 173

    (102) factor -> L_PARENTHESE . arithmetic_expression R_PARENTHESE
    (84) comparison_expr_base -> L_PARENTHESE . comparison_expressions R_PARENTHESE
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (67) comparison_expressions -> . comparison_expr_OR
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (154) number -> . DIGIT
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    MINUS           shift and go to state 46
    L_PARENTHESE    shift and go to state 173
    ID              shift and go to state 22
    SELF            shift and go to state 81
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    arithmetic_expression          shift and go to state 175
    comparison_expressions         shift and go to state 174
    term                           shift and go to state 47
    comparison_expr_OR             shift and go to state 45
    factor                         shift and go to state 49
    function_call_expression       shift and go to state 176
    comparison_expr_AND            shift and go to state 48
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    id_                            shift and go to state 213
    comparison_expr_high_prec      shift and go to state 50
    number                         shift and go to state 55
    list_element                   shift and go to state 40
    comparison_expr_base           shift and go to state 53
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 174

    (84) comparison_expr_base -> L_PARENTHESE comparison_expressions . R_PARENTHESE

    R_PARENTHESE    shift and go to state 139


state 175

    (102) factor -> L_PARENTHESE arithmetic_expression . R_PARENTHESE
    (92) arithmetic_expression -> arithmetic_expression . PLUS term
    (93) arithmetic_expression -> arithmetic_expression . MINUS term
    (82) comparison_expr_base -> arithmetic_expression .

  ! shift/reduce conflict for R_PARENTHESE resolved as shift
    R_PARENTHESE    shift and go to state 138
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    EQUALS          reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    NOT_EQUALS      reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    LESS_THAN       reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    LESS_THAN_OR_EQ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    GREATER_THAN    reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    GREATER_THAN_OR_EQ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    AND             reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)
    OR              reduce using rule 82 (comparison_expr_base -> arithmetic_expression .)

  ! R_PARENTHESE    [ reduce using rule 82 (comparison_expr_base -> arithmetic_expression .) ]


state 176

    (98) term -> function_call_expression .
    (83) comparison_expr_base -> function_call_expression .

  ! reduce/reduce conflict for EQUALS resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for AND resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for OR resolved using rule 83 (comparison_expr_base -> function_call_expression .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 83 (comparison_expr_base -> function_call_expression .)
    MULTIPLY        reduce using rule 98 (term -> function_call_expression .)
    DIVIDE          reduce using rule 98 (term -> function_call_expression .)
    PLUS            reduce using rule 98 (term -> function_call_expression .)
    MINUS           reduce using rule 98 (term -> function_call_expression .)
    EQUALS          reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    NOT_EQUALS      reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    LESS_THAN       reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    LESS_THAN_OR_EQ reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    GREATER_THAN    reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    GREATER_THAN_OR_EQ reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    AND             reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    OR              reduce using rule 83 (comparison_expr_base -> function_call_expression .)
    R_PARENTHESE    reduce using rule 83 (comparison_expr_base -> function_call_expression .)

  ! R_PARENTHESE    [ reduce using rule 98 (term -> function_call_expression .) ]
  ! EQUALS          [ reduce using rule 98 (term -> function_call_expression .) ]
  ! NOT_EQUALS      [ reduce using rule 98 (term -> function_call_expression .) ]
  ! LESS_THAN       [ reduce using rule 98 (term -> function_call_expression .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 98 (term -> function_call_expression .) ]
  ! GREATER_THAN    [ reduce using rule 98 (term -> function_call_expression .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 98 (term -> function_call_expression .) ]
  ! AND             [ reduce using rule 98 (term -> function_call_expression .) ]
  ! OR              [ reduce using rule 98 (term -> function_call_expression .) ]


state 177

    (101) factor -> id_ .
    (64) function_call_expression -> id_ . L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> id_ . L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> id_ . DOT function_call_expression
    (141) id_ -> id_ . DOT id_
    (81) comparison_expr_base -> id_ .
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET
    (86) all_types -> id_ .

  ! reduce/reduce conflict for EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for AND resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for OR resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for AND resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for OR resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 81 (comparison_expr_base -> id_ .)
    MULTIPLY        reduce using rule 101 (factor -> id_ .)
    DIVIDE          reduce using rule 101 (factor -> id_ .)
    PLUS            reduce using rule 101 (factor -> id_ .)
    MINUS           reduce using rule 101 (factor -> id_ .)
    L_PARENTHESE    shift and go to state 70
    DOT             shift and go to state 140
    EQUALS          reduce using rule 81 (comparison_expr_base -> id_ .)
    NOT_EQUALS      reduce using rule 81 (comparison_expr_base -> id_ .)
    LESS_THAN       reduce using rule 81 (comparison_expr_base -> id_ .)
    LESS_THAN_OR_EQ reduce using rule 81 (comparison_expr_base -> id_ .)
    GREATER_THAN    reduce using rule 81 (comparison_expr_base -> id_ .)
    GREATER_THAN_OR_EQ reduce using rule 81 (comparison_expr_base -> id_ .)
    AND             reduce using rule 81 (comparison_expr_base -> id_ .)
    OR              reduce using rule 81 (comparison_expr_base -> id_ .)
    R_PARENTHESE    reduce using rule 81 (comparison_expr_base -> id_ .)
    L_BRACKET       shift and go to state 69

  ! R_PARENTHESE    [ reduce using rule 101 (factor -> id_ .) ]
  ! EQUALS          [ reduce using rule 101 (factor -> id_ .) ]
  ! NOT_EQUALS      [ reduce using rule 101 (factor -> id_ .) ]
  ! LESS_THAN       [ reduce using rule 101 (factor -> id_ .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 101 (factor -> id_ .) ]
  ! GREATER_THAN    [ reduce using rule 101 (factor -> id_ .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 101 (factor -> id_ .) ]
  ! AND             [ reduce using rule 101 (factor -> id_ .) ]
  ! OR              [ reduce using rule 101 (factor -> id_ .) ]
  ! EQUALS          [ reduce using rule 86 (all_types -> id_ .) ]
  ! NOT_EQUALS      [ reduce using rule 86 (all_types -> id_ .) ]
  ! LESS_THAN       [ reduce using rule 86 (all_types -> id_ .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 86 (all_types -> id_ .) ]
  ! GREATER_THAN    [ reduce using rule 86 (all_types -> id_ .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 86 (all_types -> id_ .) ]
  ! AND             [ reduce using rule 86 (all_types -> id_ .) ]
  ! OR              [ reduce using rule 86 (all_types -> id_ .) ]
  ! R_PARENTHESE    [ reduce using rule 86 (all_types -> id_ .) ]


state 178

    (152) float_number -> number DOT number .

    MULTIPLY        reduce using rule 152 (float_number -> number DOT number .)
    DIVIDE          reduce using rule 152 (float_number -> number DOT number .)
    PLUS            reduce using rule 152 (float_number -> number DOT number .)
    MINUS           reduce using rule 152 (float_number -> number DOT number .)
    COMMA           reduce using rule 152 (float_number -> number DOT number .)
    NEWLINE         reduce using rule 152 (float_number -> number DOT number .)
    EQUALS          reduce using rule 152 (float_number -> number DOT number .)
    NOT_EQUALS      reduce using rule 152 (float_number -> number DOT number .)
    LESS_THAN       reduce using rule 152 (float_number -> number DOT number .)
    LESS_THAN_OR_EQ reduce using rule 152 (float_number -> number DOT number .)
    GREATER_THAN    reduce using rule 152 (float_number -> number DOT number .)
    GREATER_THAN_OR_EQ reduce using rule 152 (float_number -> number DOT number .)
    AND             reduce using rule 152 (float_number -> number DOT number .)
    OR              reduce using rule 152 (float_number -> number DOT number .)
    R_PARENTHESE    reduce using rule 152 (float_number -> number DOT number .)
    COLON           reduce using rule 152 (float_number -> number DOT number .)
    R_BRACKET       reduce using rule 152 (float_number -> number DOT number .)


state 179

    (104) variable_assignment -> id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression .
    (92) arithmetic_expression -> arithmetic_expression . PLUS term
    (93) arithmetic_expression -> arithmetic_expression . MINUS term

    NEWLINE         reduce using rule 104 (variable_assignment -> id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93


state 180

    (108) list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .

    EQUAL_ASSIGN    reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    DOT             reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    L_BRACKET       reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    L_PARENTHESE    reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    PLUS            reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    MINUS           reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    MULTIPLY        reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    DIVIDE          reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    POWER           reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    NEWLINE         reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    COMMA           reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    EQUALS          reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    NOT_EQUALS      reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    LESS_THAN       reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    LESS_THAN_OR_EQ reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    GREATER_THAN    reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    GREATER_THAN_OR_EQ reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    AND             reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    OR              reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    R_PARENTHESE    reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    COLON           reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    IN              reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    IMPORT          reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)
    R_BRACKET       reduce using rule 108 (list_element -> id_ L_BRACKET arithmetic_expression R_BRACKET .)


state 181

    (64) function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .

    COMMA           reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    NEWLINE         reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    MULTIPLY        reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    DIVIDE          reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    PLUS            reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    MINUS           reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    EQUALS          reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    NOT_EQUALS      reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    LESS_THAN       reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    LESS_THAN_OR_EQ reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    GREATER_THAN    reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    GREATER_THAN_OR_EQ reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    AND             reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    OR              reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    R_PARENTHESE    reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    COLON           reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    R_BRACKET       reduce using rule 64 (function_call_expression -> id_ L_PARENTHESE expressions_wrapper R_PARENTHESE .)


state 182

    (21) class_decl -> CLASS ID COLON block .

    NEWLINE         reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    CLASS           reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    METHOD_DEF      reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    IF              reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    ELSE_IF         reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    ELSE            reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    FOR             reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    WHILE           reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    PASS            reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    RETURN          reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    CONTINUE        reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    BREAK           reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    SELF            reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    IMPORT          reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    FROM            reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    ID              reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    LEN             reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    L_PARENTHESE    reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    MINUS           reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    NOT             reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    DIGIT           reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    TRUE            reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    FALSE           reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    STRING_LITERAL  reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    L_BRACKET       reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    $end            reduce using rule 21 (class_decl -> CLASS ID COLON block .)
    DEDENT          reduce using rule 21 (class_decl -> CLASS ID COLON block .)


state 183

    (22) class_decl -> CLASS ID L_PARENTHESE id_ . R_PARENTHESE COLON block
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

    R_PARENTHESE    shift and go to state 214
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69


state 184

    (141) id_ -> id_ DOT id_ .
    (64) function_call_expression -> id_ . L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> id_ . L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> id_ . DOT function_call_expression
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

  ! shift/reduce conflict for L_PARENTHESE resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for L_BRACKET resolved as shift
    MULTIPLY        reduce using rule 141 (id_ -> id_ DOT id_ .)
    DIVIDE          reduce using rule 141 (id_ -> id_ DOT id_ .)
    R_PARENTHESE    reduce using rule 141 (id_ -> id_ DOT id_ .)
    PLUS            reduce using rule 141 (id_ -> id_ DOT id_ .)
    MINUS           reduce using rule 141 (id_ -> id_ DOT id_ .)
    EQUALS          reduce using rule 141 (id_ -> id_ DOT id_ .)
    NOT_EQUALS      reduce using rule 141 (id_ -> id_ DOT id_ .)
    LESS_THAN       reduce using rule 141 (id_ -> id_ DOT id_ .)
    LESS_THAN_OR_EQ reduce using rule 141 (id_ -> id_ DOT id_ .)
    GREATER_THAN    reduce using rule 141 (id_ -> id_ DOT id_ .)
    GREATER_THAN_OR_EQ reduce using rule 141 (id_ -> id_ DOT id_ .)
    AND             reduce using rule 141 (id_ -> id_ DOT id_ .)
    OR              reduce using rule 141 (id_ -> id_ DOT id_ .)
    COLON           reduce using rule 141 (id_ -> id_ DOT id_ .)
    NEWLINE         reduce using rule 141 (id_ -> id_ DOT id_ .)
    COMMA           reduce using rule 141 (id_ -> id_ DOT id_ .)
    R_BRACKET       reduce using rule 141 (id_ -> id_ DOT id_ .)
    L_PARENTHESE    shift and go to state 70
    DOT             shift and go to state 140
    L_BRACKET       shift and go to state 69

  ! L_PARENTHESE    [ reduce using rule 141 (id_ -> id_ DOT id_ .) ]
  ! DOT             [ reduce using rule 141 (id_ -> id_ DOT id_ .) ]
  ! L_BRACKET       [ reduce using rule 141 (id_ -> id_ DOT id_ .) ]


state 185

    (23) method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE . COLON block
    (25) method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE . RIGHT_ARROW TYPE COLON block

    COLON           shift and go to state 215
    RIGHT_ARROW     shift and go to state 216


state 186

    (24) method_decl -> METHOD_DEF ID L_PARENTHESE SELF . R_PARENTHESE COLON block
    (26) method_decl -> METHOD_DEF ID L_PARENTHESE SELF . R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (28) method_decl -> METHOD_DEF ID L_PARENTHESE SELF . COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (30) method_decl -> METHOD_DEF ID L_PARENTHESE SELF . COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> METHOD_DEF ID L_PARENTHESE SELF . COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (34) method_decl -> METHOD_DEF ID L_PARENTHESE SELF . COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (142) id_ -> SELF . DOT id_

    R_PARENTHESE    shift and go to state 217
    COMMA           shift and go to state 218
    DOT             shift and go to state 83


state 187

    (27) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper . R_PARENTHESE COLON block
    (29) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper . R_PARENTHESE RIGHT_ARROW TYPE COLON block

    R_PARENTHESE    shift and go to state 219


state 188

    (31) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper . R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper . R_PARENTHESE COLON block

    R_PARENTHESE    shift and go to state 220


state 189

    (109) ids_one_or_more_in_commas_wrapper -> ids_one_or_more_in_commas .

    R_PARENTHESE    reduce using rule 109 (ids_one_or_more_in_commas_wrapper -> ids_one_or_more_in_commas .)


state 190

    (35) ids_one_or_more_in_commas_with_types_wrapper -> ids_one_or_more_in_commas_with_types .

    R_PARENTHESE    reduce using rule 35 (ids_one_or_more_in_commas_with_types_wrapper -> ids_one_or_more_in_commas_with_types .)


state 191

    (110) ids_one_or_more_in_commas -> id_ .
    (111) ids_one_or_more_in_commas -> id_ . COMMA types_one_or_more_in_commas
    (36) ids_one_or_more_in_commas_with_types -> id_ . COLON TYPE
    (37) ids_one_or_more_in_commas_with_types -> id_ . COLON TYPE COMMA ids_one_or_more_in_commas_with_types
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

    R_PARENTHESE    reduce using rule 110 (ids_one_or_more_in_commas -> id_ .)
    COMMA           shift and go to state 159
    COLON           shift and go to state 221
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69


state 192

    (38) if_stmnt -> IF expression COLON block .
    (39) if_stmnt -> IF expression COLON block . elif_stmnt
    (40) if_stmnt -> IF expression COLON block . else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block

  ! shift/reduce conflict for ELSE_IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    NEWLINE         reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    CLASS           reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    METHOD_DEF      reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    IF              reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    FOR             reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    WHILE           reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    PASS            reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    RETURN          reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    CONTINUE        reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    BREAK           reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    SELF            reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    IMPORT          reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    FROM            reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    ID              reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    LEN             reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    L_PARENTHESE    reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    MINUS           reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    NOT             reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    DIGIT           reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    TRUE            reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    FALSE           reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    STRING_LITERAL  reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    L_BRACKET       reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    $end            reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    DEDENT          reduce using rule 38 (if_stmnt -> IF expression COLON block .)
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29

  ! ELSE_IF         [ reduce using rule 38 (if_stmnt -> IF expression COLON block .) ]
  ! ELSE            [ reduce using rule 38 (if_stmnt -> IF expression COLON block .) ]

    elif_stmnt                     shift and go to state 222
    else_statement                 shift and go to state 223

state 193

    (41) elif_stmnt -> ELSE_IF expression COLON block .
    (42) elif_stmnt -> ELSE_IF expression COLON block . elif_stmnt
    (43) elif_stmnt -> ELSE_IF expression COLON block . else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block

  ! shift/reduce conflict for ELSE_IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    NEWLINE         reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    CLASS           reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    METHOD_DEF      reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    IF              reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    FOR             reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    WHILE           reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    PASS            reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    RETURN          reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    CONTINUE        reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    BREAK           reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    SELF            reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    IMPORT          reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    FROM            reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    ID              reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    LEN             reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    L_PARENTHESE    reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    MINUS           reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    NOT             reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    DIGIT           reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    TRUE            reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    FALSE           reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    STRING_LITERAL  reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    L_BRACKET       reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    $end            reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    DEDENT          reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .)
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29

  ! ELSE_IF         [ reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .) ]
  ! ELSE            [ reduce using rule 41 (elif_stmnt -> ELSE_IF expression COLON block .) ]

    elif_stmnt                     shift and go to state 224
    else_statement                 shift and go to state 225

state 194

    (54) block -> NEWLINE INDENT . statements DEDENT
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 6
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    statements                     shift and go to state 226
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 195

    (45) for_statement -> FOR for_stmnt_parameter_wrapper COLON block .

    NEWLINE         reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    CLASS           reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    METHOD_DEF      reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    IF              reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    ELSE_IF         reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    ELSE            reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    FOR             reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    WHILE           reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    PASS            reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    RETURN          reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    CONTINUE        reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    BREAK           reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    SELF            reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    IMPORT          reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    FROM            reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    ID              reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    LEN             reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    L_PARENTHESE    reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    MINUS           reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    NOT             reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    DIGIT           reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    TRUE            reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    FALSE           reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    STRING_LITERAL  reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    L_BRACKET       reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    $end            reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)
    DEDENT          reduce using rule 45 (for_statement -> FOR for_stmnt_parameter_wrapper COLON block .)


state 196

    (46) for_stmnt_parameter_wrapper -> id_ IN RANGE . L_PARENTHESE expression R_PARENTHESE
    (47) for_stmnt_parameter_wrapper -> id_ IN RANGE . L_PARENTHESE integer_number R_PARENTHESE
    (48) for_stmnt_parameter_wrapper -> id_ IN RANGE . L_PARENTHESE integer_number COMMA integer_number R_PARENTHESE
    (49) for_stmnt_parameter_wrapper -> id_ IN RANGE . L_PARENTHESE integer_number COMMA integer_number COMMA integer_number R_PARENTHESE

    L_PARENTHESE    shift and go to state 227


state 197

    (141) id_ -> id_ DOT id_ .
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for L_BRACKET resolved as shift
    IN              reduce using rule 141 (id_ -> id_ DOT id_ .)
    NEWLINE         reduce using rule 141 (id_ -> id_ DOT id_ .)
    IMPORT          reduce using rule 141 (id_ -> id_ DOT id_ .)
    COMMA           reduce using rule 141 (id_ -> id_ DOT id_ .)
    R_BRACKET       reduce using rule 141 (id_ -> id_ DOT id_ .)
    EQUAL_ASSIGN    reduce using rule 141 (id_ -> id_ DOT id_ .)
    L_PARENTHESE    reduce using rule 141 (id_ -> id_ DOT id_ .)
    PLUS            reduce using rule 141 (id_ -> id_ DOT id_ .)
    MINUS           reduce using rule 141 (id_ -> id_ DOT id_ .)
    MULTIPLY        reduce using rule 141 (id_ -> id_ DOT id_ .)
    DIVIDE          reduce using rule 141 (id_ -> id_ DOT id_ .)
    POWER           reduce using rule 141 (id_ -> id_ DOT id_ .)
    EQUALS          reduce using rule 141 (id_ -> id_ DOT id_ .)
    NOT_EQUALS      reduce using rule 141 (id_ -> id_ DOT id_ .)
    LESS_THAN       reduce using rule 141 (id_ -> id_ DOT id_ .)
    LESS_THAN_OR_EQ reduce using rule 141 (id_ -> id_ DOT id_ .)
    GREATER_THAN    reduce using rule 141 (id_ -> id_ DOT id_ .)
    GREATER_THAN_OR_EQ reduce using rule 141 (id_ -> id_ DOT id_ .)
    AND             reduce using rule 141 (id_ -> id_ DOT id_ .)
    OR              reduce using rule 141 (id_ -> id_ DOT id_ .)
    R_PARENTHESE    reduce using rule 141 (id_ -> id_ DOT id_ .)
    COLON           reduce using rule 141 (id_ -> id_ DOT id_ .)
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69

  ! DOT             [ reduce using rule 141 (id_ -> id_ DOT id_ .) ]
  ! L_BRACKET       [ reduce using rule 141 (id_ -> id_ DOT id_ .) ]


state 198

    (50) while_statement -> WHILE expression COLON block .

    NEWLINE         reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    CLASS           reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    METHOD_DEF      reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    IF              reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    ELSE_IF         reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    ELSE            reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    FOR             reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    WHILE           reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    PASS            reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    RETURN          reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    CONTINUE        reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    BREAK           reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    SELF            reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    IMPORT          reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    FROM            reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    ID              reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    LEN             reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    L_PARENTHESE    reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    MINUS           reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    NOT             reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    DIGIT           reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    TRUE            reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    FALSE           reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    STRING_LITERAL  reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    L_BRACKET       reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    $end            reduce using rule 50 (while_statement -> WHILE expression COLON block .)
    DEDENT          reduce using rule 50 (while_statement -> WHILE expression COLON block .)


state 199

    (52) import_statement -> FROM id_ IMPORT id_ .
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

    NEWLINE         reduce using rule 52 (import_statement -> FROM id_ IMPORT id_ .)
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69


state 200

    (113) types_one_or_more_in_commas -> all_types COMMA integer_number_one_or_more_in_commas .

    R_BRACKET       reduce using rule 113 (types_one_or_more_in_commas -> all_types COMMA integer_number_one_or_more_in_commas .)
    R_PARENTHESE    reduce using rule 113 (types_one_or_more_in_commas -> all_types COMMA integer_number_one_or_more_in_commas .)


state 201

    (114) types_one_or_more_in_commas -> all_types COMMA boolean_types_one_or_more_in_commas .

    R_BRACKET       reduce using rule 114 (types_one_or_more_in_commas -> all_types COMMA boolean_types_one_or_more_in_commas .)
    R_PARENTHESE    reduce using rule 114 (types_one_or_more_in_commas -> all_types COMMA boolean_types_one_or_more_in_commas .)


state 202

    (115) types_one_or_more_in_commas -> all_types COMMA float_number_one_or_more_in_commas .

    R_BRACKET       reduce using rule 115 (types_one_or_more_in_commas -> all_types COMMA float_number_one_or_more_in_commas .)
    R_PARENTHESE    reduce using rule 115 (types_one_or_more_in_commas -> all_types COMMA float_number_one_or_more_in_commas .)


state 203

    (116) types_one_or_more_in_commas -> all_types COMMA string_object_one_or_more_in_commas .

    R_BRACKET       reduce using rule 116 (types_one_or_more_in_commas -> all_types COMMA string_object_one_or_more_in_commas .)
    R_PARENTHESE    reduce using rule 116 (types_one_or_more_in_commas -> all_types COMMA string_object_one_or_more_in_commas .)


state 204

    (117) types_one_or_more_in_commas -> all_types COMMA ids_one_or_more_in_commas .

    R_BRACKET       reduce using rule 117 (types_one_or_more_in_commas -> all_types COMMA ids_one_or_more_in_commas .)
    R_PARENTHESE    reduce using rule 117 (types_one_or_more_in_commas -> all_types COMMA ids_one_or_more_in_commas .)


state 205

    (120) integer_number_one_or_more_in_commas -> integer_number .
    (121) integer_number_one_or_more_in_commas -> integer_number . COMMA types_one_or_more_in_commas

    R_BRACKET       reduce using rule 120 (integer_number_one_or_more_in_commas -> integer_number .)
    R_PARENTHESE    reduce using rule 120 (integer_number_one_or_more_in_commas -> integer_number .)
    COMMA           shift and go to state 228


state 206

    (118) boolean_types_one_or_more_in_commas -> boolean_types .
    (119) boolean_types_one_or_more_in_commas -> boolean_types . COMMA types_one_or_more_in_commas

    R_BRACKET       reduce using rule 118 (boolean_types_one_or_more_in_commas -> boolean_types .)
    R_PARENTHESE    reduce using rule 118 (boolean_types_one_or_more_in_commas -> boolean_types .)
    COMMA           shift and go to state 229


state 207

    (122) float_number_one_or_more_in_commas -> float_number .
    (123) float_number_one_or_more_in_commas -> float_number . COMMA types_one_or_more_in_commas

    R_BRACKET       reduce using rule 122 (float_number_one_or_more_in_commas -> float_number .)
    R_PARENTHESE    reduce using rule 122 (float_number_one_or_more_in_commas -> float_number .)
    COMMA           shift and go to state 230


state 208

    (124) string_object_one_or_more_in_commas -> string_object .
    (125) string_object_one_or_more_in_commas -> string_object . COMMA types_one_or_more_in_commas

    R_BRACKET       reduce using rule 124 (string_object_one_or_more_in_commas -> string_object .)
    R_PARENTHESE    reduce using rule 124 (string_object_one_or_more_in_commas -> string_object .)
    COMMA           shift and go to state 231


state 209

    (110) ids_one_or_more_in_commas -> id_ .
    (111) ids_one_or_more_in_commas -> id_ . COMMA types_one_or_more_in_commas
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

    R_BRACKET       reduce using rule 110 (ids_one_or_more_in_commas -> id_ .)
    R_PARENTHESE    reduce using rule 110 (ids_one_or_more_in_commas -> id_ .)
    COMMA           shift and go to state 159
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69


state 210

    (86) all_types -> id_ .
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

    COMMA           reduce using rule 86 (all_types -> id_ .)
    R_BRACKET       reduce using rule 86 (all_types -> id_ .)
    R_PARENTHESE    reduce using rule 86 (all_types -> id_ .)
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69


state 211

    (111) ids_one_or_more_in_commas -> id_ COMMA types_one_or_more_in_commas .

    R_BRACKET       reduce using rule 111 (ids_one_or_more_in_commas -> id_ COMMA types_one_or_more_in_commas .)
    R_PARENTHESE    reduce using rule 111 (ids_one_or_more_in_commas -> id_ COMMA types_one_or_more_in_commas .)


state 212

    (59) expression -> LEN L_PARENTHESE expressions_wrapper R_PARENTHESE .

    COMMA           reduce using rule 59 (expression -> LEN L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    NEWLINE         reduce using rule 59 (expression -> LEN L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    R_PARENTHESE    reduce using rule 59 (expression -> LEN L_PARENTHESE expressions_wrapper R_PARENTHESE .)
    COLON           reduce using rule 59 (expression -> LEN L_PARENTHESE expressions_wrapper R_PARENTHESE .)


state 213

    (101) factor -> id_ .
    (64) function_call_expression -> id_ . L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> id_ . L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> id_ . DOT function_call_expression
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET
    (81) comparison_expr_base -> id_ .
    (86) all_types -> id_ .

  ! reduce/reduce conflict for EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for AND resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for OR resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for AND resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for OR resolved using rule 81 (comparison_expr_base -> id_ .)
  ! reduce/reduce conflict for R_PARENTHESE resolved using rule 81 (comparison_expr_base -> id_ .)
    MULTIPLY        reduce using rule 101 (factor -> id_ .)
    DIVIDE          reduce using rule 101 (factor -> id_ .)
    PLUS            reduce using rule 101 (factor -> id_ .)
    MINUS           reduce using rule 101 (factor -> id_ .)
    L_PARENTHESE    shift and go to state 70
    DOT             shift and go to state 140
    L_BRACKET       shift and go to state 69
    EQUALS          reduce using rule 81 (comparison_expr_base -> id_ .)
    NOT_EQUALS      reduce using rule 81 (comparison_expr_base -> id_ .)
    LESS_THAN       reduce using rule 81 (comparison_expr_base -> id_ .)
    LESS_THAN_OR_EQ reduce using rule 81 (comparison_expr_base -> id_ .)
    GREATER_THAN    reduce using rule 81 (comparison_expr_base -> id_ .)
    GREATER_THAN_OR_EQ reduce using rule 81 (comparison_expr_base -> id_ .)
    AND             reduce using rule 81 (comparison_expr_base -> id_ .)
    OR              reduce using rule 81 (comparison_expr_base -> id_ .)
    R_PARENTHESE    reduce using rule 81 (comparison_expr_base -> id_ .)

  ! R_PARENTHESE    [ reduce using rule 101 (factor -> id_ .) ]
  ! EQUALS          [ reduce using rule 101 (factor -> id_ .) ]
  ! NOT_EQUALS      [ reduce using rule 101 (factor -> id_ .) ]
  ! LESS_THAN       [ reduce using rule 101 (factor -> id_ .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 101 (factor -> id_ .) ]
  ! GREATER_THAN    [ reduce using rule 101 (factor -> id_ .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 101 (factor -> id_ .) ]
  ! AND             [ reduce using rule 101 (factor -> id_ .) ]
  ! OR              [ reduce using rule 101 (factor -> id_ .) ]
  ! EQUALS          [ reduce using rule 86 (all_types -> id_ .) ]
  ! NOT_EQUALS      [ reduce using rule 86 (all_types -> id_ .) ]
  ! LESS_THAN       [ reduce using rule 86 (all_types -> id_ .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 86 (all_types -> id_ .) ]
  ! GREATER_THAN    [ reduce using rule 86 (all_types -> id_ .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 86 (all_types -> id_ .) ]
  ! AND             [ reduce using rule 86 (all_types -> id_ .) ]
  ! OR              [ reduce using rule 86 (all_types -> id_ .) ]
  ! R_PARENTHESE    [ reduce using rule 86 (all_types -> id_ .) ]


state 214

    (22) class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE . COLON block

    COLON           shift and go to state 232


state 215

    (23) method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 233
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 216

    (25) method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW . TYPE COLON block
    (144) TYPE -> . BOOLEAN
    (145) TYPE -> . FLOAT
    (146) TYPE -> . STRING
    (147) TYPE -> . INT
    (148) TYPE -> . LIST

    BOOLEAN         shift and go to state 235
    FLOAT           shift and go to state 236
    STRING          shift and go to state 237
    INT             shift and go to state 238
    LIST            shift and go to state 239

    TYPE                           shift and go to state 234

state 217

    (24) method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE . COLON block
    (26) method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE . RIGHT_ARROW TYPE COLON block

    COLON           shift and go to state 240
    RIGHT_ARROW     shift and go to state 241


state 218

    (28) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA . ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (30) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA . ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA . ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (34) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA . ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (109) ids_one_or_more_in_commas_wrapper -> . ids_one_or_more_in_commas
    (35) ids_one_or_more_in_commas_with_types_wrapper -> . ids_one_or_more_in_commas_with_types
    (110) ids_one_or_more_in_commas -> . id_
    (111) ids_one_or_more_in_commas -> . id_ COMMA types_one_or_more_in_commas
    (36) ids_one_or_more_in_commas_with_types -> . id_ COLON TYPE
    (37) ids_one_or_more_in_commas_with_types -> . id_ COLON TYPE COMMA ids_one_or_more_in_commas_with_types
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    ID              shift and go to state 22
    SELF            shift and go to state 81

    ids_one_or_more_in_commas_wrapper shift and go to state 242
    ids_one_or_more_in_commas_with_types_wrapper shift and go to state 243
    ids_one_or_more_in_commas      shift and go to state 189
    ids_one_or_more_in_commas_with_types shift and go to state 190
    id_                            shift and go to state 191
    list_element                   shift and go to state 40

state 219

    (27) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE . COLON block
    (29) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE . RIGHT_ARROW TYPE COLON block

    COLON           shift and go to state 244
    RIGHT_ARROW     shift and go to state 245


state 220

    (31) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE . RIGHT_ARROW TYPE COLON block
    (33) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE . COLON block

    RIGHT_ARROW     shift and go to state 246
    COLON           shift and go to state 247


state 221

    (36) ids_one_or_more_in_commas_with_types -> id_ COLON . TYPE
    (37) ids_one_or_more_in_commas_with_types -> id_ COLON . TYPE COMMA ids_one_or_more_in_commas_with_types
    (144) TYPE -> . BOOLEAN
    (145) TYPE -> . FLOAT
    (146) TYPE -> . STRING
    (147) TYPE -> . INT
    (148) TYPE -> . LIST

    BOOLEAN         shift and go to state 235
    FLOAT           shift and go to state 236
    STRING          shift and go to state 237
    INT             shift and go to state 238
    LIST            shift and go to state 239

    TYPE                           shift and go to state 248

state 222

    (39) if_stmnt -> IF expression COLON block elif_stmnt .

    NEWLINE         reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    CLASS           reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    METHOD_DEF      reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    IF              reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    ELSE_IF         reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    ELSE            reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    FOR             reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    WHILE           reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    PASS            reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    RETURN          reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    CONTINUE        reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    BREAK           reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    SELF            reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    IMPORT          reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    FROM            reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    ID              reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    LEN             reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    L_PARENTHESE    reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    MINUS           reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    NOT             reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    DIGIT           reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    TRUE            reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    FALSE           reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    STRING_LITERAL  reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    L_BRACKET       reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    $end            reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)
    DEDENT          reduce using rule 39 (if_stmnt -> IF expression COLON block elif_stmnt .)


state 223

    (40) if_stmnt -> IF expression COLON block else_statement .

    NEWLINE         reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    CLASS           reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    METHOD_DEF      reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    IF              reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    ELSE_IF         reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    ELSE            reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    FOR             reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    WHILE           reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    PASS            reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    RETURN          reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    CONTINUE        reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    BREAK           reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    SELF            reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    IMPORT          reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    FROM            reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    ID              reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    LEN             reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    L_PARENTHESE    reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    MINUS           reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    NOT             reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    DIGIT           reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    TRUE            reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    FALSE           reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    STRING_LITERAL  reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    L_BRACKET       reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    $end            reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)
    DEDENT          reduce using rule 40 (if_stmnt -> IF expression COLON block else_statement .)


state 224

    (42) elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .

    NEWLINE         reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    CLASS           reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    METHOD_DEF      reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    IF              reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    ELSE_IF         reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    ELSE            reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    FOR             reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    WHILE           reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    PASS            reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    RETURN          reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    CONTINUE        reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    BREAK           reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    SELF            reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    IMPORT          reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    FROM            reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    ID              reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    LEN             reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    L_PARENTHESE    reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    MINUS           reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    NOT             reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    DIGIT           reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    TRUE            reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    FALSE           reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    STRING_LITERAL  reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    L_BRACKET       reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    $end            reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)
    DEDENT          reduce using rule 42 (elif_stmnt -> ELSE_IF expression COLON block elif_stmnt .)


state 225

    (43) elif_stmnt -> ELSE_IF expression COLON block else_statement .

    NEWLINE         reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    CLASS           reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    METHOD_DEF      reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    IF              reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    ELSE_IF         reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    ELSE            reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    FOR             reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    WHILE           reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    PASS            reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    RETURN          reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    CONTINUE        reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    BREAK           reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    SELF            reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    IMPORT          reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    FROM            reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    ID              reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    LEN             reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    L_PARENTHESE    reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    MINUS           reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    NOT             reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    DIGIT           reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    TRUE            reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    FALSE           reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    STRING_LITERAL  reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    L_BRACKET       reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    $end            reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)
    DEDENT          reduce using rule 43 (elif_stmnt -> ELSE_IF expression COLON block else_statement .)


state 226

    (54) block -> NEWLINE INDENT statements . DEDENT

    DEDENT          shift and go to state 249


state 227

    (46) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE . expression R_PARENTHESE
    (47) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE . integer_number R_PARENTHESE
    (48) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE . integer_number COMMA integer_number R_PARENTHESE
    (49) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE . integer_number COMMA integer_number COMMA integer_number R_PARENTHESE
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (153) integer_number -> . number
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (154) number -> . DIGIT
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    DIGIT           shift and go to state 57
    ID              shift and go to state 22
    SELF            shift and go to state 81
    NOT             shift and go to state 54
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    id_                            shift and go to state 80
    expression                     shift and go to state 250
    integer_number                 shift and go to state 251
    comparison_expressions         shift and go to state 43
    arithmetic_expression          shift and go to state 36
    function_call_expression       shift and go to state 44
    number                         shift and go to state 55
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    list_element                   shift and go to state 40
    comparison_expr_high_prec      shift and go to state 50
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 228

    (121) integer_number_one_or_more_in_commas -> integer_number COMMA . types_one_or_more_in_commas
    (112) types_one_or_more_in_commas -> . all_types
    (113) types_one_or_more_in_commas -> . all_types COMMA integer_number_one_or_more_in_commas
    (114) types_one_or_more_in_commas -> . all_types COMMA boolean_types_one_or_more_in_commas
    (115) types_one_or_more_in_commas -> . all_types COMMA float_number_one_or_more_in_commas
    (116) types_one_or_more_in_commas -> . all_types COMMA string_object_one_or_more_in_commas
    (117) types_one_or_more_in_commas -> . all_types COMMA ids_one_or_more_in_commas
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (154) number -> . DIGIT

    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 22
    SELF            shift and go to state 81
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    integer_number                 shift and go to state 101
    types_one_or_more_in_commas    shift and go to state 252
    all_types                      shift and go to state 99
    boolean_types                  shift and go to state 58
    id_                            shift and go to state 210
    float_number                   shift and go to state 102
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    number                         shift and go to state 55

state 229

    (119) boolean_types_one_or_more_in_commas -> boolean_types COMMA . types_one_or_more_in_commas
    (112) types_one_or_more_in_commas -> . all_types
    (113) types_one_or_more_in_commas -> . all_types COMMA integer_number_one_or_more_in_commas
    (114) types_one_or_more_in_commas -> . all_types COMMA boolean_types_one_or_more_in_commas
    (115) types_one_or_more_in_commas -> . all_types COMMA float_number_one_or_more_in_commas
    (116) types_one_or_more_in_commas -> . all_types COMMA string_object_one_or_more_in_commas
    (117) types_one_or_more_in_commas -> . all_types COMMA ids_one_or_more_in_commas
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (154) number -> . DIGIT

    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 22
    SELF            shift and go to state 81
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    boolean_types                  shift and go to state 58
    types_one_or_more_in_commas    shift and go to state 253
    all_types                      shift and go to state 99
    id_                            shift and go to state 210
    integer_number                 shift and go to state 101
    float_number                   shift and go to state 102
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    number                         shift and go to state 55

state 230

    (123) float_number_one_or_more_in_commas -> float_number COMMA . types_one_or_more_in_commas
    (112) types_one_or_more_in_commas -> . all_types
    (113) types_one_or_more_in_commas -> . all_types COMMA integer_number_one_or_more_in_commas
    (114) types_one_or_more_in_commas -> . all_types COMMA boolean_types_one_or_more_in_commas
    (115) types_one_or_more_in_commas -> . all_types COMMA float_number_one_or_more_in_commas
    (116) types_one_or_more_in_commas -> . all_types COMMA string_object_one_or_more_in_commas
    (117) types_one_or_more_in_commas -> . all_types COMMA ids_one_or_more_in_commas
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (154) number -> . DIGIT

    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 22
    SELF            shift and go to state 81
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    float_number                   shift and go to state 102
    types_one_or_more_in_commas    shift and go to state 254
    all_types                      shift and go to state 99
    boolean_types                  shift and go to state 58
    id_                            shift and go to state 210
    integer_number                 shift and go to state 101
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    number                         shift and go to state 55

state 231

    (125) string_object_one_or_more_in_commas -> string_object COMMA . types_one_or_more_in_commas
    (112) types_one_or_more_in_commas -> . all_types
    (113) types_one_or_more_in_commas -> . all_types COMMA integer_number_one_or_more_in_commas
    (114) types_one_or_more_in_commas -> . all_types COMMA boolean_types_one_or_more_in_commas
    (115) types_one_or_more_in_commas -> . all_types COMMA float_number_one_or_more_in_commas
    (116) types_one_or_more_in_commas -> . all_types COMMA string_object_one_or_more_in_commas
    (117) types_one_or_more_in_commas -> . all_types COMMA ids_one_or_more_in_commas
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (154) number -> . DIGIT

    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    ID              shift and go to state 22
    SELF            shift and go to state 81
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41
    DIGIT           shift and go to state 57

    string_object                  shift and go to state 59
    types_one_or_more_in_commas    shift and go to state 255
    all_types                      shift and go to state 99
    boolean_types                  shift and go to state 58
    id_                            shift and go to state 210
    integer_number                 shift and go to state 101
    float_number                   shift and go to state 102
    list_object                    shift and go to state 60
    list_element                   shift and go to state 40
    number                         shift and go to state 55

state 232

    (22) class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    id_                            shift and go to state 20
    block                          shift and go to state 256
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 233

    (23) method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .

    NEWLINE         reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    CLASS           reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    METHOD_DEF      reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    IF              reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    ELSE_IF         reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    ELSE            reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    FOR             reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    WHILE           reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    PASS            reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    RETURN          reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    CONTINUE        reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    BREAK           reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    SELF            reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    IMPORT          reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    FROM            reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    ID              reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    LEN             reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    L_PARENTHESE    reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    MINUS           reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    NOT             reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    DIGIT           reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    TRUE            reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    FALSE           reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    STRING_LITERAL  reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    L_BRACKET       reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    $end            reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)
    DEDENT          reduce using rule 23 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block .)


state 234

    (25) method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE . COLON block

    COLON           shift and go to state 257


state 235

    (144) TYPE -> BOOLEAN .

    COLON           reduce using rule 144 (TYPE -> BOOLEAN .)
    COMMA           reduce using rule 144 (TYPE -> BOOLEAN .)
    R_PARENTHESE    reduce using rule 144 (TYPE -> BOOLEAN .)


state 236

    (145) TYPE -> FLOAT .

    COLON           reduce using rule 145 (TYPE -> FLOAT .)
    COMMA           reduce using rule 145 (TYPE -> FLOAT .)
    R_PARENTHESE    reduce using rule 145 (TYPE -> FLOAT .)


state 237

    (146) TYPE -> STRING .

    COLON           reduce using rule 146 (TYPE -> STRING .)
    COMMA           reduce using rule 146 (TYPE -> STRING .)
    R_PARENTHESE    reduce using rule 146 (TYPE -> STRING .)


state 238

    (147) TYPE -> INT .

    COLON           reduce using rule 147 (TYPE -> INT .)
    COMMA           reduce using rule 147 (TYPE -> INT .)
    R_PARENTHESE    reduce using rule 147 (TYPE -> INT .)


state 239

    (148) TYPE -> LIST .

    COLON           reduce using rule 148 (TYPE -> LIST .)
    COMMA           reduce using rule 148 (TYPE -> LIST .)
    R_PARENTHESE    reduce using rule 148 (TYPE -> LIST .)


state 240

    (24) method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 258
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 241

    (26) method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW . TYPE COLON block
    (144) TYPE -> . BOOLEAN
    (145) TYPE -> . FLOAT
    (146) TYPE -> . STRING
    (147) TYPE -> . INT
    (148) TYPE -> . LIST

    BOOLEAN         shift and go to state 235
    FLOAT           shift and go to state 236
    STRING          shift and go to state 237
    INT             shift and go to state 238
    LIST            shift and go to state 239

    TYPE                           shift and go to state 259

state 242

    (28) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper . R_PARENTHESE COLON block
    (30) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper . R_PARENTHESE RIGHT_ARROW TYPE COLON block

    R_PARENTHESE    shift and go to state 260


state 243

    (32) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper . R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (34) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper . R_PARENTHESE COLON block

    R_PARENTHESE    shift and go to state 261


state 244

    (27) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 262
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 245

    (29) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW . TYPE COLON block
    (144) TYPE -> . BOOLEAN
    (145) TYPE -> . FLOAT
    (146) TYPE -> . STRING
    (147) TYPE -> . INT
    (148) TYPE -> . LIST

    BOOLEAN         shift and go to state 235
    FLOAT           shift and go to state 236
    STRING          shift and go to state 237
    INT             shift and go to state 238
    LIST            shift and go to state 239

    TYPE                           shift and go to state 263

state 246

    (31) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW . TYPE COLON block
    (144) TYPE -> . BOOLEAN
    (145) TYPE -> . FLOAT
    (146) TYPE -> . STRING
    (147) TYPE -> . INT
    (148) TYPE -> . LIST

    BOOLEAN         shift and go to state 235
    FLOAT           shift and go to state 236
    STRING          shift and go to state 237
    INT             shift and go to state 238
    LIST            shift and go to state 239

    TYPE                           shift and go to state 264

state 247

    (33) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 265
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 248

    (36) ids_one_or_more_in_commas_with_types -> id_ COLON TYPE .
    (37) ids_one_or_more_in_commas_with_types -> id_ COLON TYPE . COMMA ids_one_or_more_in_commas_with_types

    R_PARENTHESE    reduce using rule 36 (ids_one_or_more_in_commas_with_types -> id_ COLON TYPE .)
    COMMA           shift and go to state 266


state 249

    (54) block -> NEWLINE INDENT statements DEDENT .

    $end            reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    NEWLINE         reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    CLASS           reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    METHOD_DEF      reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    IF              reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    ELSE_IF         reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    ELSE            reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    FOR             reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    WHILE           reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    PASS            reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    RETURN          reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    CONTINUE        reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    BREAK           reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    SELF            reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    IMPORT          reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    FROM            reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    ID              reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    LEN             reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    L_PARENTHESE    reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    MINUS           reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    NOT             reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    DIGIT           reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    TRUE            reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    FALSE           reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    STRING_LITERAL  reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    L_BRACKET       reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)
    DEDENT          reduce using rule 54 (block -> NEWLINE INDENT statements DEDENT .)


state 250

    (46) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE expression . R_PARENTHESE

    R_PARENTHESE    shift and go to state 267


state 251

    (47) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number . R_PARENTHESE
    (48) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number . COMMA integer_number R_PARENTHESE
    (49) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number . COMMA integer_number COMMA integer_number R_PARENTHESE
    (99) factor -> integer_number .
    (87) all_types -> integer_number .

  ! shift/reduce conflict for R_PARENTHESE resolved as shift
  ! reduce/reduce conflict for EQUALS resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQ resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQ resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for AND resolved using rule 87 (all_types -> integer_number .)
  ! reduce/reduce conflict for OR resolved using rule 87 (all_types -> integer_number .)
  ! shift/reduce conflict for R_PARENTHESE resolved as shift
    R_PARENTHESE    shift and go to state 268
    COMMA           shift and go to state 269
    MULTIPLY        reduce using rule 99 (factor -> integer_number .)
    DIVIDE          reduce using rule 99 (factor -> integer_number .)
    PLUS            reduce using rule 99 (factor -> integer_number .)
    MINUS           reduce using rule 99 (factor -> integer_number .)
    EQUALS          reduce using rule 87 (all_types -> integer_number .)
    NOT_EQUALS      reduce using rule 87 (all_types -> integer_number .)
    LESS_THAN       reduce using rule 87 (all_types -> integer_number .)
    LESS_THAN_OR_EQ reduce using rule 87 (all_types -> integer_number .)
    GREATER_THAN    reduce using rule 87 (all_types -> integer_number .)
    GREATER_THAN_OR_EQ reduce using rule 87 (all_types -> integer_number .)
    AND             reduce using rule 87 (all_types -> integer_number .)
    OR              reduce using rule 87 (all_types -> integer_number .)

  ! R_PARENTHESE    [ reduce using rule 99 (factor -> integer_number .) ]
  ! EQUALS          [ reduce using rule 99 (factor -> integer_number .) ]
  ! NOT_EQUALS      [ reduce using rule 99 (factor -> integer_number .) ]
  ! LESS_THAN       [ reduce using rule 99 (factor -> integer_number .) ]
  ! LESS_THAN_OR_EQ [ reduce using rule 99 (factor -> integer_number .) ]
  ! GREATER_THAN    [ reduce using rule 99 (factor -> integer_number .) ]
  ! GREATER_THAN_OR_EQ [ reduce using rule 99 (factor -> integer_number .) ]
  ! AND             [ reduce using rule 99 (factor -> integer_number .) ]
  ! OR              [ reduce using rule 99 (factor -> integer_number .) ]
  ! R_PARENTHESE    [ reduce using rule 87 (all_types -> integer_number .) ]


state 252

    (121) integer_number_one_or_more_in_commas -> integer_number COMMA types_one_or_more_in_commas .

    R_BRACKET       reduce using rule 121 (integer_number_one_or_more_in_commas -> integer_number COMMA types_one_or_more_in_commas .)
    R_PARENTHESE    reduce using rule 121 (integer_number_one_or_more_in_commas -> integer_number COMMA types_one_or_more_in_commas .)


state 253

    (119) boolean_types_one_or_more_in_commas -> boolean_types COMMA types_one_or_more_in_commas .

    R_BRACKET       reduce using rule 119 (boolean_types_one_or_more_in_commas -> boolean_types COMMA types_one_or_more_in_commas .)
    R_PARENTHESE    reduce using rule 119 (boolean_types_one_or_more_in_commas -> boolean_types COMMA types_one_or_more_in_commas .)


state 254

    (123) float_number_one_or_more_in_commas -> float_number COMMA types_one_or_more_in_commas .

    R_BRACKET       reduce using rule 123 (float_number_one_or_more_in_commas -> float_number COMMA types_one_or_more_in_commas .)
    R_PARENTHESE    reduce using rule 123 (float_number_one_or_more_in_commas -> float_number COMMA types_one_or_more_in_commas .)


state 255

    (125) string_object_one_or_more_in_commas -> string_object COMMA types_one_or_more_in_commas .

    R_BRACKET       reduce using rule 125 (string_object_one_or_more_in_commas -> string_object COMMA types_one_or_more_in_commas .)
    R_PARENTHESE    reduce using rule 125 (string_object_one_or_more_in_commas -> string_object COMMA types_one_or_more_in_commas .)


state 256

    (22) class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .

    NEWLINE         reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    CLASS           reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    METHOD_DEF      reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    IF              reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    ELSE_IF         reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    ELSE            reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    FOR             reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    WHILE           reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    PASS            reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    RETURN          reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    CONTINUE        reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    BREAK           reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    SELF            reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    IMPORT          reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    FROM            reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    ID              reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    LEN             reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    L_PARENTHESE    reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    MINUS           reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    NOT             reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    DIGIT           reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    TRUE            reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    FALSE           reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    STRING_LITERAL  reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    L_BRACKET       reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    $end            reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)
    DEDENT          reduce using rule 22 (class_decl -> CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block .)


state 257

    (25) method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 270
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 258

    (24) method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .

    NEWLINE         reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    CLASS           reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    METHOD_DEF      reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    IF              reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    ELSE_IF         reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    ELSE            reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    FOR             reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    WHILE           reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    PASS            reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    RETURN          reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    CONTINUE        reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    BREAK           reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    SELF            reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    IMPORT          reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    FROM            reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    ID              reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    LEN             reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    L_PARENTHESE    reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    MINUS           reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    NOT             reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    DIGIT           reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    TRUE            reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    FALSE           reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    STRING_LITERAL  reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    L_BRACKET       reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    $end            reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)
    DEDENT          reduce using rule 24 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block .)


state 259

    (26) method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE . COLON block

    COLON           shift and go to state 271


state 260

    (28) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE . COLON block
    (30) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE . RIGHT_ARROW TYPE COLON block

    COLON           shift and go to state 272
    RIGHT_ARROW     shift and go to state 273


state 261

    (32) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE . RIGHT_ARROW TYPE COLON block
    (34) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE . COLON block

    RIGHT_ARROW     shift and go to state 274
    COLON           shift and go to state 275


state 262

    (27) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .

    NEWLINE         reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    CLASS           reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    METHOD_DEF      reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    IF              reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    ELSE_IF         reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    ELSE            reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    FOR             reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    WHILE           reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    PASS            reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    RETURN          reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    CONTINUE        reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    BREAK           reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    SELF            reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    IMPORT          reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    FROM            reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    ID              reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    LEN             reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    L_PARENTHESE    reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    MINUS           reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    NOT             reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    DIGIT           reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    TRUE            reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    FALSE           reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    STRING_LITERAL  reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    L_BRACKET       reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    $end            reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    DEDENT          reduce using rule 27 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)


state 263

    (29) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE . COLON block

    COLON           shift and go to state 276


state 264

    (31) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE . COLON block

    COLON           shift and go to state 277


state 265

    (33) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .

    NEWLINE         reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    CLASS           reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    METHOD_DEF      reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    IF              reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    ELSE_IF         reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    ELSE            reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    FOR             reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    WHILE           reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    PASS            reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    RETURN          reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    CONTINUE        reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    BREAK           reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    SELF            reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    IMPORT          reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    FROM            reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    ID              reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    LEN             reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    L_PARENTHESE    reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    MINUS           reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    NOT             reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    DIGIT           reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    TRUE            reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    FALSE           reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    STRING_LITERAL  reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    L_BRACKET       reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    $end            reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    DEDENT          reduce using rule 33 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)


state 266

    (37) ids_one_or_more_in_commas_with_types -> id_ COLON TYPE COMMA . ids_one_or_more_in_commas_with_types
    (36) ids_one_or_more_in_commas_with_types -> . id_ COLON TYPE
    (37) ids_one_or_more_in_commas_with_types -> . id_ COLON TYPE COMMA ids_one_or_more_in_commas_with_types
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET

    ID              shift and go to state 22
    SELF            shift and go to state 81

    id_                            shift and go to state 278
    ids_one_or_more_in_commas_with_types shift and go to state 279
    list_element                   shift and go to state 40

state 267

    (46) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE expression R_PARENTHESE .

    COLON           reduce using rule 46 (for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE expression R_PARENTHESE .)


state 268

    (47) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number R_PARENTHESE .

    COLON           reduce using rule 47 (for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number R_PARENTHESE .)


state 269

    (48) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number COMMA . integer_number R_PARENTHESE
    (49) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number COMMA . integer_number COMMA integer_number R_PARENTHESE
    (153) integer_number -> . number
    (154) number -> . DIGIT

    DIGIT           shift and go to state 57

    integer_number                 shift and go to state 280
    number                         shift and go to state 281

state 270

    (25) method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .

    NEWLINE         reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    CLASS           reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    METHOD_DEF      reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    IF              reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ELSE_IF         reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ELSE            reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FOR             reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    WHILE           reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    PASS            reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    RETURN          reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    CONTINUE        reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    BREAK           reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    SELF            reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    IMPORT          reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FROM            reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ID              reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    LEN             reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    L_PARENTHESE    reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    MINUS           reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    NOT             reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    DIGIT           reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    TRUE            reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FALSE           reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    STRING_LITERAL  reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    L_BRACKET       reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    $end            reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    DEDENT          reduce using rule 25 (method_decl -> METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block .)


state 271

    (26) method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 282
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 272

    (28) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 283
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 273

    (30) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW . TYPE COLON block
    (144) TYPE -> . BOOLEAN
    (145) TYPE -> . FLOAT
    (146) TYPE -> . STRING
    (147) TYPE -> . INT
    (148) TYPE -> . LIST

    BOOLEAN         shift and go to state 235
    FLOAT           shift and go to state 236
    STRING          shift and go to state 237
    INT             shift and go to state 238
    LIST            shift and go to state 239

    TYPE                           shift and go to state 284

state 274

    (32) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW . TYPE COLON block
    (144) TYPE -> . BOOLEAN
    (145) TYPE -> . FLOAT
    (146) TYPE -> . STRING
    (147) TYPE -> . INT
    (148) TYPE -> . LIST

    BOOLEAN         shift and go to state 235
    FLOAT           shift and go to state 236
    STRING          shift and go to state 237
    INT             shift and go to state 238
    LIST            shift and go to state 239

    TYPE                           shift and go to state 285

state 275

    (34) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 286
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 276

    (29) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 287
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 277

    (31) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 288
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 278

    (36) ids_one_or_more_in_commas_with_types -> id_ . COLON TYPE
    (37) ids_one_or_more_in_commas_with_types -> id_ . COLON TYPE COMMA ids_one_or_more_in_commas_with_types
    (141) id_ -> id_ . DOT id_
    (108) list_element -> id_ . L_BRACKET arithmetic_expression R_BRACKET

    COLON           shift and go to state 221
    DOT             shift and go to state 151
    L_BRACKET       shift and go to state 69


state 279

    (37) ids_one_or_more_in_commas_with_types -> id_ COLON TYPE COMMA ids_one_or_more_in_commas_with_types .

    R_PARENTHESE    reduce using rule 37 (ids_one_or_more_in_commas_with_types -> id_ COLON TYPE COMMA ids_one_or_more_in_commas_with_types .)


state 280

    (48) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number COMMA integer_number . R_PARENTHESE
    (49) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number COMMA integer_number . COMMA integer_number R_PARENTHESE

    R_PARENTHESE    shift and go to state 290
    COMMA           shift and go to state 289


state 281

    (153) integer_number -> number .

    R_PARENTHESE    reduce using rule 153 (integer_number -> number .)
    COMMA           reduce using rule 153 (integer_number -> number .)


state 282

    (26) method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .

    NEWLINE         reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    CLASS           reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    METHOD_DEF      reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    IF              reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ELSE_IF         reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ELSE            reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FOR             reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    WHILE           reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    PASS            reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    RETURN          reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    CONTINUE        reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    BREAK           reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    SELF            reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    IMPORT          reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FROM            reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ID              reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    LEN             reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    L_PARENTHESE    reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    MINUS           reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    NOT             reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    DIGIT           reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    TRUE            reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FALSE           reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    STRING_LITERAL  reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    L_BRACKET       reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    $end            reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    DEDENT          reduce using rule 26 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block .)


state 283

    (28) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .

    NEWLINE         reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    CLASS           reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    METHOD_DEF      reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    IF              reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    ELSE_IF         reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    ELSE            reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    FOR             reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    WHILE           reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    PASS            reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    RETURN          reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    CONTINUE        reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    BREAK           reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    SELF            reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    IMPORT          reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    FROM            reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    ID              reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    LEN             reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    L_PARENTHESE    reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    MINUS           reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    NOT             reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    DIGIT           reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    TRUE            reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    FALSE           reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    STRING_LITERAL  reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    L_BRACKET       reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    $end            reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)
    DEDENT          reduce using rule 28 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block .)


state 284

    (30) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE . COLON block

    COLON           shift and go to state 291


state 285

    (32) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE . COLON block

    COLON           shift and go to state 292


state 286

    (34) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .

    NEWLINE         reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    CLASS           reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    METHOD_DEF      reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    IF              reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    ELSE_IF         reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    ELSE            reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    FOR             reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    WHILE           reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    PASS            reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    RETURN          reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    CONTINUE        reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    BREAK           reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    SELF            reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    IMPORT          reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    FROM            reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    ID              reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    LEN             reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    L_PARENTHESE    reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    MINUS           reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    NOT             reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    DIGIT           reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    TRUE            reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    FALSE           reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    STRING_LITERAL  reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    L_BRACKET       reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    $end            reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)
    DEDENT          reduce using rule 34 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block .)


state 287

    (29) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .

    NEWLINE         reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    CLASS           reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    METHOD_DEF      reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    IF              reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ELSE_IF         reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ELSE            reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FOR             reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    WHILE           reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    PASS            reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    RETURN          reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    CONTINUE        reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    BREAK           reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    SELF            reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    IMPORT          reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FROM            reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ID              reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    LEN             reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    L_PARENTHESE    reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    MINUS           reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    NOT             reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    DIGIT           reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    TRUE            reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FALSE           reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    STRING_LITERAL  reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    L_BRACKET       reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    $end            reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    DEDENT          reduce using rule 29 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)


state 288

    (31) method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .

    NEWLINE         reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    CLASS           reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    METHOD_DEF      reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    IF              reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ELSE_IF         reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ELSE            reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FOR             reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    WHILE           reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    PASS            reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    RETURN          reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    CONTINUE        reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    BREAK           reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    SELF            reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    IMPORT          reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FROM            reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ID              reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    LEN             reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    L_PARENTHESE    reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    MINUS           reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    NOT             reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    DIGIT           reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    TRUE            reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FALSE           reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    STRING_LITERAL  reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    L_BRACKET       reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    $end            reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    DEDENT          reduce using rule 31 (method_decl -> METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)


state 289

    (49) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number COMMA integer_number COMMA . integer_number R_PARENTHESE
    (153) integer_number -> . number
    (154) number -> . DIGIT

    DIGIT           shift and go to state 57

    integer_number                 shift and go to state 293
    number                         shift and go to state 281

state 290

    (48) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number COMMA integer_number R_PARENTHESE .

    COLON           reduce using rule 48 (for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number COMMA integer_number R_PARENTHESE .)


state 291

    (30) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 294
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 292

    (32) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON . block
    (54) block -> . NEWLINE INDENT statements DEDENT
    (55) block -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . simple_statements
    (5) statement -> . statement_with_block
    (6) statement -> . NEWLINE
    (7) simple_statements -> . simple_statement NEWLINE
    (8) statement_with_block -> . class_decl
    (9) statement_with_block -> . method_decl
    (10) statement_with_block -> . if_stmnt
    (11) statement_with_block -> . elif_stmnt
    (12) statement_with_block -> . else_statement
    (13) statement_with_block -> . for_statement
    (14) statement_with_block -> . while_statement
    (15) simple_statement -> . reserved_words_statement
    (16) simple_statement -> . variable_assignment
    (17) simple_statement -> . expressions_wrapper
    (18) simple_statement -> . import_statement
    (19) simple_statement -> . return_statement
    (20) simple_statement -> . id_
    (21) class_decl -> . CLASS ID COLON block
    (22) class_decl -> . CLASS ID L_PARENTHESE id_ R_PARENTHESE COLON block
    (23) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE COLON block
    (24) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE COLON block
    (25) method_decl -> . METHOD_DEF ID L_PARENTHESE R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (26) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (27) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (28) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE COLON block
    (29) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (30) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (31) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (32) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block
    (33) method_decl -> . METHOD_DEF ID L_PARENTHESE ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (34) method_decl -> . METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE COLON block
    (38) if_stmnt -> . IF expression COLON block
    (39) if_stmnt -> . IF expression COLON block elif_stmnt
    (40) if_stmnt -> . IF expression COLON block else_statement
    (41) elif_stmnt -> . ELSE_IF expression COLON block
    (42) elif_stmnt -> . ELSE_IF expression COLON block elif_stmnt
    (43) elif_stmnt -> . ELSE_IF expression COLON block else_statement
    (44) else_statement -> . ELSE COLON block
    (45) for_statement -> . FOR for_stmnt_parameter_wrapper COLON block
    (50) while_statement -> . WHILE expression COLON block
    (155) reserved_words_statement -> . PASS
    (156) reserved_words_statement -> . RETURN
    (157) reserved_words_statement -> . CONTINUE
    (158) reserved_words_statement -> . BREAK
    (159) reserved_words_statement -> . SELF
    (103) variable_assignment -> . id_ EQUAL_ASSIGN expression
    (104) variable_assignment -> . id_ arithmetic_op EQUAL_ASSIGN arithmetic_expression
    (56) expressions_wrapper -> . expressions
    (51) import_statement -> . IMPORT id_
    (52) import_statement -> . FROM id_ IMPORT id_
    (53) return_statement -> . RETURN expression
    (140) id_ -> . ID
    (141) id_ -> . id_ DOT id_
    (142) id_ -> . SELF DOT id_
    (143) id_ -> . list_element
    (57) expressions -> . expression
    (58) expressions -> . expression COMMA expressions
    (108) list_element -> . id_ L_BRACKET arithmetic_expression R_BRACKET
    (59) expression -> . LEN L_PARENTHESE expressions_wrapper R_PARENTHESE
    (60) expression -> . comparison_expressions
    (61) expression -> . arithmetic_expression
    (62) expression -> . function_call_expression
    (63) expression -> . L_PARENTHESE expression R_PARENTHESE
    (67) comparison_expressions -> . comparison_expr_OR
    (91) arithmetic_expression -> . MINUS arithmetic_expression
    (92) arithmetic_expression -> . arithmetic_expression PLUS term
    (93) arithmetic_expression -> . arithmetic_expression MINUS term
    (94) arithmetic_expression -> . term
    (64) function_call_expression -> . id_ L_PARENTHESE expressions_wrapper R_PARENTHESE
    (65) function_call_expression -> . id_ L_PARENTHESE R_PARENTHESE
    (66) function_call_expression -> . id_ DOT function_call_expression
    (68) comparison_expr_OR -> . comparison_expr_OR OR comparison_expr_AND
    (69) comparison_expr_OR -> . comparison_expr_AND
    (95) term -> . term MULTIPLY factor
    (96) term -> . term DIVIDE factor
    (97) term -> . factor
    (98) term -> . function_call_expression
    (70) comparison_expr_AND -> . comparison_expr_AND AND comparison_expr_high_prec
    (71) comparison_expr_AND -> . comparison_expr_high_prec
    (99) factor -> . integer_number
    (100) factor -> . float_number
    (101) factor -> . id_
    (102) factor -> . L_PARENTHESE arithmetic_expression R_PARENTHESE
    (72) comparison_expr_high_prec -> . comparison_expr_high_prec EQUALS comparison_expr_base
    (73) comparison_expr_high_prec -> . comparison_expr_high_prec NOT_EQUALS comparison_expr_base
    (74) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN comparison_expr_base
    (75) comparison_expr_high_prec -> . comparison_expr_high_prec LESS_THAN_OR_EQ comparison_expr_base
    (76) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN comparison_expr_base
    (77) comparison_expr_high_prec -> . comparison_expr_high_prec GREATER_THAN_OR_EQ comparison_expr_base
    (78) comparison_expr_high_prec -> . comparison_expr_base
    (79) comparison_expr_high_prec -> . NOT comparison_expr_base
    (153) integer_number -> . number
    (152) float_number -> . number DOT number
    (80) comparison_expr_base -> . all_types
    (81) comparison_expr_base -> . id_
    (82) comparison_expr_base -> . arithmetic_expression
    (83) comparison_expr_base -> . function_call_expression
    (84) comparison_expr_base -> . L_PARENTHESE comparison_expressions R_PARENTHESE
    (154) number -> . DIGIT
    (85) all_types -> . boolean_types
    (86) all_types -> . id_
    (87) all_types -> . integer_number
    (88) all_types -> . float_number
    (89) all_types -> . string_object
    (90) all_types -> . list_object
    (150) boolean_types -> . TRUE
    (151) boolean_types -> . FALSE
    (149) string_object -> . STRING_LITERAL
    (105) list_object -> . L_BRACKET R_BRACKET
    (106) list_object -> . L_BRACKET types_one_or_more_in_commas R_BRACKET
    (107) list_object -> . L_BRACKET ids_one_or_more_in_commas R_BRACKET

    NEWLINE         shift and go to state 147
    CLASS           shift and go to state 21
    METHOD_DEF      shift and go to state 24
    IF              shift and go to state 26
    ELSE_IF         shift and go to state 28
    ELSE            shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    PASS            shift and go to state 32
    RETURN          shift and go to state 33
    CONTINUE        shift and go to state 34
    BREAK           shift and go to state 35
    SELF            shift and go to state 25
    IMPORT          shift and go to state 38
    FROM            shift and go to state 39
    ID              shift and go to state 22
    LEN             shift and go to state 42
    L_PARENTHESE    shift and go to state 23
    MINUS           shift and go to state 46
    NOT             shift and go to state 54
    DIGIT           shift and go to state 57
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING_LITERAL  shift and go to state 63
    L_BRACKET       shift and go to state 41

    block                          shift and go to state 295
    statements                     shift and go to state 148
    statement                      shift and go to state 3
    simple_statements              shift and go to state 4
    statement_with_block           shift and go to state 5
    simple_statement               shift and go to state 7
    class_decl                     shift and go to state 8
    method_decl                    shift and go to state 9
    if_stmnt                       shift and go to state 10
    elif_stmnt                     shift and go to state 11
    else_statement                 shift and go to state 12
    for_statement                  shift and go to state 13
    while_statement                shift and go to state 14
    reserved_words_statement       shift and go to state 15
    variable_assignment            shift and go to state 16
    expressions_wrapper            shift and go to state 17
    import_statement               shift and go to state 18
    return_statement               shift and go to state 19
    id_                            shift and go to state 20
    expression                     shift and go to state 27
    arithmetic_expression          shift and go to state 36
    expressions                    shift and go to state 37
    list_element                   shift and go to state 40
    comparison_expressions         shift and go to state 43
    function_call_expression       shift and go to state 44
    comparison_expr_OR             shift and go to state 45
    term                           shift and go to state 47
    comparison_expr_AND            shift and go to state 48
    factor                         shift and go to state 49
    comparison_expr_high_prec      shift and go to state 50
    integer_number                 shift and go to state 51
    float_number                   shift and go to state 52
    comparison_expr_base           shift and go to state 53
    number                         shift and go to state 55
    all_types                      shift and go to state 56
    boolean_types                  shift and go to state 58
    string_object                  shift and go to state 59
    list_object                    shift and go to state 60

state 293

    (49) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number COMMA integer_number COMMA integer_number . R_PARENTHESE

    R_PARENTHESE    shift and go to state 296


state 294

    (30) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .

    NEWLINE         reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    CLASS           reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    METHOD_DEF      reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    IF              reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ELSE_IF         reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ELSE            reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FOR             reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    WHILE           reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    PASS            reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    RETURN          reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    CONTINUE        reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    BREAK           reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    SELF            reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    IMPORT          reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FROM            reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ID              reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    LEN             reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    L_PARENTHESE    reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    MINUS           reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    NOT             reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    DIGIT           reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    TRUE            reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FALSE           reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    STRING_LITERAL  reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    L_BRACKET       reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    $end            reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    DEDENT          reduce using rule 30 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)


state 295

    (32) method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .

    NEWLINE         reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    CLASS           reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    METHOD_DEF      reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    IF              reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ELSE_IF         reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ELSE            reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FOR             reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    WHILE           reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    PASS            reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    RETURN          reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    CONTINUE        reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    BREAK           reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    SELF            reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    IMPORT          reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FROM            reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    ID              reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    LEN             reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    L_PARENTHESE    reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    MINUS           reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    NOT             reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    DIGIT           reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    TRUE            reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    FALSE           reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    STRING_LITERAL  reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    L_BRACKET       reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    $end            reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)
    DEDENT          reduce using rule 32 (method_decl -> METHOD_DEF ID L_PARENTHESE SELF COMMA ids_one_or_more_in_commas_with_types_wrapper R_PARENTHESE RIGHT_ARROW TYPE COLON block .)


state 296

    (49) for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number COMMA integer_number COMMA integer_number R_PARENTHESE .

    COLON           reduce using rule 49 (for_stmnt_parameter_wrapper -> id_ IN RANGE L_PARENTHESE integer_number COMMA integer_number COMMA integer_number R_PARENTHESE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 3 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for METHOD_DEF in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for ELSE_IF in state 3 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for PASS in state 3 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 3 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 3 resolved as shift
WARNING: shift/reduce conflict for SELF in state 3 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 3 resolved as shift
WARNING: shift/reduce conflict for FROM in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for LEN in state 3 resolved as shift
WARNING: shift/reduce conflict for L_PARENTHESE in state 3 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 3 resolved as shift
WARNING: shift/reduce conflict for NOT in state 3 resolved as shift
WARNING: shift/reduce conflict for DIGIT in state 3 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 3 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 3 resolved as shift
WARNING: shift/reduce conflict for L_BRACKET in state 3 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 20 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 20 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 20 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 20 resolved as shift
WARNING: shift/reduce conflict for R_PARENTHESE in state 78 resolved as shift
WARNING: shift/reduce conflict for R_PARENTHESE in state 78 resolved as shift
WARNING: shift/reduce conflict for R_PARENTHESE in state 79 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 100 resolved as shift
WARNING: shift/reduce conflict for DOT in state 130 resolved as shift
WARNING: shift/reduce conflict for L_PARENTHESE in state 130 resolved as shift
WARNING: shift/reduce conflict for L_BRACKET in state 130 resolved as shift
WARNING: shift/reduce conflict for DOT in state 142 resolved as shift
WARNING: shift/reduce conflict for L_BRACKET in state 142 resolved as shift
WARNING: shift/reduce conflict for R_PARENTHESE in state 175 resolved as shift
WARNING: shift/reduce conflict for L_PARENTHESE in state 184 resolved as shift
WARNING: shift/reduce conflict for DOT in state 184 resolved as shift
WARNING: shift/reduce conflict for L_BRACKET in state 184 resolved as shift
WARNING: shift/reduce conflict for ELSE_IF in state 192 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 192 resolved as shift
WARNING: shift/reduce conflict for ELSE_IF in state 193 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 193 resolved as shift
WARNING: shift/reduce conflict for DOT in state 197 resolved as shift
WARNING: shift/reduce conflict for L_BRACKET in state 197 resolved as shift
WARNING: shift/reduce conflict for R_PARENTHESE in state 251 resolved as shift
WARNING: shift/reduce conflict for R_PARENTHESE in state 251 resolved as shift
WARNING: reduce/reduce conflict in state 20 resolved using rule (simple_statement -> id_)
WARNING: rejected rule (factor -> id_) in state 20
WARNING: reduce/reduce conflict in state 20 resolved using rule (comparison_expr_base -> id_)
WARNING: rejected rule (factor -> id_) in state 20
WARNING: reduce/reduce conflict in state 20 resolved using rule (simple_statement -> id_)
WARNING: rejected rule (comparison_expr_base -> id_) in state 20
WARNING: reduce/reduce conflict in state 20 resolved using rule (comparison_expr_base -> id_)
WARNING: rejected rule (all_types -> id_) in state 20
WARNING: reduce/reduce conflict in state 20 resolved using rule (simple_statement -> id_)
WARNING: rejected rule (all_types -> id_) in state 20
WARNING: reduce/reduce conflict in state 36 resolved using rule (expression -> arithmetic_expression)
WARNING: rejected rule (comparison_expr_base -> arithmetic_expression) in state 36
WARNING: reduce/reduce conflict in state 44 resolved using rule (expression -> function_call_expression)
WARNING: rejected rule (term -> function_call_expression) in state 44
WARNING: reduce/reduce conflict in state 44 resolved using rule (comparison_expr_base -> function_call_expression)
WARNING: rejected rule (term -> function_call_expression) in state 44
WARNING: reduce/reduce conflict in state 44 resolved using rule (expression -> function_call_expression)
WARNING: rejected rule (comparison_expr_base -> function_call_expression) in state 44
WARNING: reduce/reduce conflict in state 51 resolved using rule (all_types -> integer_number)
WARNING: rejected rule (factor -> integer_number) in state 51
WARNING: reduce/reduce conflict in state 52 resolved using rule (all_types -> float_number)
WARNING: rejected rule (factor -> float_number) in state 52
WARNING: reduce/reduce conflict in state 80 resolved using rule (comparison_expr_base -> id_)
WARNING: rejected rule (factor -> id_) in state 80
WARNING: reduce/reduce conflict in state 80 resolved using rule (comparison_expr_base -> id_)
WARNING: rejected rule (all_types -> id_) in state 80
WARNING: reduce/reduce conflict in state 100 resolved using rule (all_types -> id_)
WARNING: rejected rule (ids_one_or_more_in_commas -> id_) in state 100
WARNING: reduce/reduce conflict in state 121 resolved using rule (comparison_expr_base -> id_)
WARNING: rejected rule (all_types -> id_) in state 121
WARNING: reduce/reduce conflict in state 121 resolved using rule (comparison_expr_base -> id_)
WARNING: rejected rule (factor -> id_) in state 121
WARNING: reduce/reduce conflict in state 123 resolved using rule (comparison_expr_base -> function_call_expression)
WARNING: rejected rule (term -> function_call_expression) in state 123
WARNING: reduce/reduce conflict in state 125 resolved using rule (all_types -> integer_number)
WARNING: rejected rule (factor -> integer_number) in state 125
WARNING: reduce/reduce conflict in state 126 resolved using rule (all_types -> float_number)
WARNING: rejected rule (factor -> float_number) in state 126
WARNING: reduce/reduce conflict in state 176 resolved using rule (comparison_expr_base -> function_call_expression)
WARNING: rejected rule (term -> function_call_expression) in state 176
WARNING: reduce/reduce conflict in state 177 resolved using rule (comparison_expr_base -> id_)
WARNING: rejected rule (factor -> id_) in state 177
WARNING: reduce/reduce conflict in state 177 resolved using rule (comparison_expr_base -> id_)
WARNING: rejected rule (all_types -> id_) in state 177
WARNING: reduce/reduce conflict in state 213 resolved using rule (comparison_expr_base -> id_)
WARNING: rejected rule (factor -> id_) in state 213
WARNING: reduce/reduce conflict in state 213 resolved using rule (comparison_expr_base -> id_)
WARNING: rejected rule (all_types -> id_) in state 213
WARNING: reduce/reduce conflict in state 251 resolved using rule (all_types -> integer_number)
WARNING: rejected rule (factor -> integer_number) in state 251
